You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (total_match); ignore branches in other methods and API calls. Generate up to 50 tests invoking total_match. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.List;
public class TOTAL_MATCH {

    public static List<String> total_match(List<String> lst1, List<String> lst2) {
        int l1 = 0;
        for (String st : lst1) l1 += st.length();
        int l2 = 0;
        for (String st : lst2) l2 += st.length();
        if (l1 <= l2)
            return lst1;
        return lst2;
    }
}
