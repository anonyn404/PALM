You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (largest_smallest_integers); ignore branches in other methods and API calls. Generate up to 50 tests invoking largest_smallest_integers. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class LARGEST_SMALLEST_INTEGERS {

    public static int[] largest_smallest_integers(int[] lst) {
        boolean negative = false, positive = false;
        int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE;
        for (int i = 0; i < lst.length; i++) {
            if (lst[i] < 0) {
                negative = true;
                max_negative = Math.max(max_negative, lst[i]);
            } else if (lst[i] > 0) {
                positive = true;
                min_positive = Math.min(min_positive, lst[i]);
            }
        }
        if (!negative)
            max_negative = 0;
        if (!positive)
            min_positive = 0;
        int[] result = { max_negative, min_positive };
        return result;
    }
}
