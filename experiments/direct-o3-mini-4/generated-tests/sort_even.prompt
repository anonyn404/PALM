You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (sort_even); ignore branches in other methods and API calls. Generate up to 50 tests invoking sort_even. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.Arrays;
public class SORT_EVEN {

    public static int[] sort_even(int[] l) {
        int[] result = new int[l.length];
        int[] evens = new int[(int) Math.ceil(l.length / 2.)];
        for (int i = 0; i < l.length; i += 2) {
            evens[(int) i / 2] = l[i];
        }
        Arrays.sort(evens);
        for (int i = 0; i < l.length; i += 1) {
            if (i % 2 == 0) {
                result[i] = evens[(int) i / 2];
            } else {
                result[i] = l[i];
            }
        }
        return result;
    }
}
