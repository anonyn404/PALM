You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (rounded_avg); ignore branches in other methods and API calls. Generate up to 50 tests invoking rounded_avg. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class ROUNDED_AVG {

    public static String rounded_avg(int n, int m) {
        if (m < n)
            return "-1";
        int summation = 0;
        for (int i = n; i < m + 1; i++) {
            summation += i;
        }
        double avg = ((double) summation) / ((double) (m - n + 1));
        double rem = avg - Math.floor(avg);
        int avg_rounded = 0;
        if (rem <= 0.5) {
            avg_rounded = (int) Math.floor(avg);
        } else {
            avg_rounded = (int) Math.ceil(avg);
        }
        return Integer.toBinaryString(avg_rounded);
    }
}
