You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (int_to_mini_roman); ignore branches in other methods and API calls. Generate up to 50 tests invoking int_to_mini_roman. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class INT_TO_MINI_ROMAN {

    public static String int_to_mini_roman(int number) {
        int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };
        String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" };
        int i = 12;
        String result = "";
        while (number > 0) {
            int div = (int) (number / num[i]);
            while (div > 0) {
                result += sym[i];
                div -= 1;
            }
            number %= num[i];
            i -= 1;
        }
        return result.toLowerCase();
    }
}
