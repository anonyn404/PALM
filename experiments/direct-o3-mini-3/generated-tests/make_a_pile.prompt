You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (make_a_pile); ignore branches in other methods and API calls. Generate up to 50 tests invoking make_a_pile. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
public class MAKE_A_PILE {

    public static ArrayList<Integer> make_a_pile(int n) {
        ArrayList<Integer> pile = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            pile.add(n + 2 * i);
        }
        return pile;
    }
}
