You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (is_sorted); ignore branches in other methods and API calls. Generate up to 50 tests invoking is_sorted. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.HashMap;
public class IS_SORTED {

    public static boolean is_sorted(int[] lst) {
        HashMap<Integer, Integer> count_num = new HashMap<>();
        for (int i = 0; i < lst.length; i++) {
            count_num.put(lst[i], 0);
        }
        for (int i = 0; i < lst.length; i++) {
            count_num.put(lst[i], count_num.get(lst[i]) + 1);
        }
        for (int i = 0; i < lst.length; i++) {
            if (count_num.get(lst[i]) > 2)
                return false;
        }
        for (int i = 0; i < lst.length - 1; i++) {
            if (lst[i] > lst[i + 1])
                return false;
        }
        return true;
    }
}
