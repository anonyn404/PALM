You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (strange_sort_list); ignore branches in other methods and API calls. Generate up to 50 tests invoking strange_sort_list. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
public class STRANGE_SORT_LIST {

    public static List<Integer> strange_sort_list(List<Integer> lst) {
        List<Integer> result = new ArrayList<Integer>();
        boolean switched = true;
        while (lst.size() > 0) {
            if (switched) {
                result.add(Collections.min(lst));
            } else {
                result.add(Collections.max(lst));
            }
            lst.remove(result.get(result.size() - 1));
            switched = (!switched);
        }
        return result;
    }
}
