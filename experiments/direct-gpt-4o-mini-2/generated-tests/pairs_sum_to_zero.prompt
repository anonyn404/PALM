You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (pairs_sum_to_zero); ignore branches in other methods and API calls. Generate up to 50 tests invoking pairs_sum_to_zero. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.List;
public class PAIRS_SUM_TO_ZERO {

    public static boolean pairs_sum_to_zero(List<Integer> l) {
        for (int i = 0; i < l.size(); i += 1) {
            for (int j = i + 1; j < l.size(); j += 1) {
                if (l.get(i) + l.get(j) == 0)
                    return true;
            }
        }
        return false;
    }
}
