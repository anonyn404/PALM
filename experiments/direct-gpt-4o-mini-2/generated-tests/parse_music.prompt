You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (parse_music); ignore branches in other methods and API calls. Generate up to 50 tests invoking parse_music. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
public class PARSE_MUSIC {

    public static List<Integer> parse_music(String music_string) {
        HashMap<String, Integer> note_map = new HashMap<String, Integer>();
        note_map.put("o", 4);
        note_map.put("o|", 2);
        note_map.put(".|", 1);
        List<Integer> result = new ArrayList<Integer>();
        if (music_string.trim().equals(""))
            return result;
        for (String note : music_string.split(" ")) {
            result.add(note_map.get(note));
        }
        return result;
    }
}
