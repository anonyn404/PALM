You are a Java test generator. Invoke the target method (parse_music) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
public static List<Integer> parse_music(String music_string){
    HashMap<String, Integer> note_map_1 = new HashMap<String, Integer>();
    note_map_1.put("o", 4);
    note_map_1.put("o|", 2);
    note_map_1.put(".|", 1);
    List<Integer> result_1 = new ArrayList<Integer>();
    assertFalse(music_string.trim().equals("")); //[1]
    java.lang.String[] note_array_1 = music_string.split(" ");
    String note_1;
    assertTrue(0 < note_array_1.length); //[2]
    note_1 = note_array_1[0];
    result_1.add(note_map_1.get(note_1));
    assertTrue(1 < note_array_1.length); //[3]
    note_1 = note_array_1[1];
    result_1.add(note_map_1.get(note_1));
    assertFalse(2 < note_array_1.length); //[4]
    return result_1;
}


** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.