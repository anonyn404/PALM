You are a Java test generator. Invoke the target method (filter_by_prefix) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.List;
public static List<String> filter_by_prefix(List<String> strings, String prefix){
    List<String> result_1 = new ArrayList<String>();
    Iterator<String> string_iter_1 = strings.iterator();
    String string_1;
    assertTrue(string_iter_1.hasNext()); //[1]
    string_1 = string_iter_1.next();
    assertFalse(string_1.startsWith(prefix)); //[2]
    assertTrue(string_iter_1.hasNext()); //[3]
    string_1 = string_iter_1.next();
    assertFalse(string_1.startsWith(prefix)); //[4]
    assertFalse(string_iter_1.hasNext()); //[5]
    return result_1;
}


** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.