You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (pluck); ignore branches in other methods and API calls. Generate up to 50 tests invoking pluck. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class PLUCK {

    public static int[] pluck(int[] arr) {
        int min_even = Integer.MAX_VALUE;
        int index = -1;
        for (int i = 0; i < arr.length; i += 1) {
            if (arr[i] % 2 == 0 && arr[i] < min_even) {
                min_even = arr[i];
                index = i;
            }
        }
        if (index == -1)
            return new int[] {};
        return new int[] { min_even, index };
    }
}
