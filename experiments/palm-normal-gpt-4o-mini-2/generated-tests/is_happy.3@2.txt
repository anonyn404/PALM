You are a Java test generator. Invoke the target method (is_happy) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static boolean is_happy(String s){
    assertFalse(s.length() < 3); //[1]
    int i_1 = 0;
    assertFalse(0 < s.length() - 2); //[2]
    return true;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
is_happy("abc");
```
Error reason: the assertion [2] is not satisfied, assertFalse(0 < s.length() - 2) 
Round 1 generation:
```java
is_happy("ab");
```
Error reason: the assertion [1] is not satisfied, assertFalse(s.length() < 3) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.