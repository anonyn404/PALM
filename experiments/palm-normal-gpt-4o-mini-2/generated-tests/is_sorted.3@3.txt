You are a Java test generator. Invoke the target method (is_sorted) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.HashMap;
public static void is_sorted(int[] lst){
    HashMap<Integer, Integer> count_num_1 = new HashMap<>();
    int i_1 = 0;
    assertFalse(0 < lst.length); //[1]
    int i_2 = 0;
    assertFalse(0 < lst.length); //[2]
    int i_3 = 0;
    assertTrue(0 < lst.length); //[3]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { is_sorted(new int[]{}); }
```
Error reason: the assertion [3] is not satisfied, assertTrue(0 < lst.length) 
Round 1 generation:
```java
public static void main(String args[]) { is_sorted(new int[]{1, 2, 3}); }
```
Error reason: the assertion [1] is not satisfied, assertFalse(0 < lst.length) 
Round 2 generation:
```java
public static void main(String args[]) { is_sorted(null); }
```
Error reason: Exception in thread "main" java.lang.NullPointerException: Cannot read the array length because "<parameter1>" is null
	at IS_SORTED.is_sorted(is_sorted.3.java:10)
	at IS_SORTED.main(is_sorted.3.java:19)

** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.