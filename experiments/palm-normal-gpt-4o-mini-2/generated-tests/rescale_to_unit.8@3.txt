You are a Java test generator. Invoke the target method (rescale_to_unit) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void rescale_to_unit(double[] numbers){
    double min_1 = Double.MAX_VALUE;
    double max_1 = Double.MIN_VALUE;
    int i_1 = 0;
    assertFalse(0 < numbers.length); //[1]
    double[] result_1 = new double[numbers.length];
    int i_2 = 0;
    assertTrue(0 < numbers.length); //[2]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    rescale_to_unit(new double[] {1.0, 2.0, 3.0}); 
}
```
Error reason: the assertion [1] is not satisfied, assertFalse(0 < numbers.length) 
Round 1 generation:
```java
public static void main(String args[]) { 
    rescale_to_unit(new double[] {}); 
}
```
Error reason: the assertion [2] is not satisfied, assertTrue(0 < numbers.length) 
Round 2 generation:
```java
public static void main(String args[]) { 
    rescale_to_unit(new double[] {0.0}); 
}
```
Error reason: the assertion [1] is not satisfied, assertFalse(0 < numbers.length) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.