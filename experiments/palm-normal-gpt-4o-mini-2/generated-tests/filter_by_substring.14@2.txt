You are a Java test generator. Invoke the target method (filter_by_substring) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.List;
public static List<String> filter_by_substring(List<String> strings, String substring){
    List<String> result_1 = new ArrayList<String>();
    Iterator<String> string_iter_1 = strings.iterator();
    String string_1;
    assertTrue(string_iter_1.hasNext()); //[1]
    string_1 = string_iter_1.next();
    assertFalse(string_1.contains(substring)); //[2]
    assertTrue(string_iter_1.hasNext()); //[3]
    string_1 = string_iter_1.next();
    assertTrue(string_1.contains(substring)); //[4]
    result_1.add(string_1);
    assertFalse(string_iter_1.hasNext()); //[5]
    return result_1;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
List<String> strings = Arrays.asList("apple", "banana");
String substring = "a";
filter_by_substring(strings, substring);
```
Error reason: the assertion [2] is not satisfied, assertFalse(string_1.contains(substring)) 
Round 1 generation:
```java
List<String> strings = Arrays.asList("hello", "world");
String substring = "test";
filter_by_substring(strings, substring);
```
Error reason: the assertion [4] is not satisfied, assertTrue(string_1.contains(substring)) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.