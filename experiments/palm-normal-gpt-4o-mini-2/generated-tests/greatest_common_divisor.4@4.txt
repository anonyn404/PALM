You are a Java test generator. Invoke the target method (greatest_common_divisor) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static int greatest_common_divisor(int a, int b){
    assertTrue(b > 0); //[1]
    int tmp_1 = a;
    a = b;
    b = tmp_1 % b;
    assertTrue(b > 0); //[2]
    int tmp_2 = a;
    a = b;
    b = tmp_2 % b;
    assertFalse(b > 0); //[3]
    return a;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
greatest_common_divisor(8, 4);
```
Error reason: the assertion [2] is not satisfied, assertTrue(b > 0) 
Round 1 generation:
```java
greatest_common_divisor(8, 5);
```
Error reason: the assertion [3] is not satisfied, assertFalse(b > 0) 
Round 2 generation:
```java
greatest_common_divisor(8, 2);
```
Error reason: the assertion [2] is not satisfied, assertTrue(b > 0) 
Round 3 generation:
```java
greatest_common_divisor(0, 1);
```
Error reason: the assertion [2] is not satisfied, assertTrue(b > 0) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.