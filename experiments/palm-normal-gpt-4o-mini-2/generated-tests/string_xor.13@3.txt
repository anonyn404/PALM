You are a Java test generator. Invoke the target method (string_xor) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static String string_xor(String a, String b){
    String result_1 = "";
    int i_1 = 0;
    assertTrue(0 < a.length()); //[1]
    assertFalse(a.charAt(0) == b.charAt(0)); //[2]
    result_1 += "1";
    i_1 += 1;
    assertTrue(1 < a.length()); //[3]
    assertTrue(a.charAt(1) == b.charAt(1)); //[4]
    result_1 += "0";
    i_1 += 1;
    assertFalse(2 < a.length()); //[5]
    return result_1;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
string_xor("ab", "cc");
```
Error reason: the assertion [4] is not satisfied, assertTrue(a.charAt(1) == b.charAt(1)) 
Round 1 generation:
```java
string_xor("ab", "aa");
```
Error reason: the assertion [2] is not satisfied, assertFalse(a.charAt(0) == b.charAt(0)) 
Round 2 generation:
```java
string_xor("ab", "bc");
```
Error reason: the assertion [4] is not satisfied, assertTrue(a.charAt(1) == b.charAt(1)) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.