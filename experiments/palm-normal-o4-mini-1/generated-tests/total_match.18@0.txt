You are a Java test generator. Invoke the target method (total_match) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.List;
public static void total_match(List<String> lst1, List<String> lst2){
    int l1_1 = 0;
    Iterator<String> st_iter_1 = lst1.iterator();
    String st_1;
    assertTrue(st_iter_1.hasNext()); //[1]
    st_1 = st_iter_1.next();
    l1_1 += st_1.length();
    assertFalse(st_iter_1.hasNext()); //[2]
    int l2_1 = 0;
    Iterator<String> st_iter_2 = lst2.iterator();
    String st_2;
    assertTrue(st_iter_2.hasNext()); //[3]
    st_2 = st_iter_2.next();
    l2_1 += st_2.length();
    assertFalse(st_iter_2.hasNext()); //[4]
}


** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.