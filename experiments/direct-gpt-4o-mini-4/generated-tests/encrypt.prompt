You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (encrypt); ignore branches in other methods and API calls. Generate up to 50 tests invoking encrypt. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class ENCRYPT {

    public static String encrypt(String s) {
        StringBuilder sb = new StringBuilder();
        String d = "abcdefghijklmnopqrstuvwxyz";
        for (char c : s.toCharArray()) {
            if ('a' <= c && c <= 'z') {
                sb.append(d.charAt((d.indexOf((int) c) + 2 * 2) % 26));
            } else {
                sb.append(c);
            }
        }
        return sb.toString();
    }
}
