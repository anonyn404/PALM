You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (cycpattern_check); ignore branches in other methods and API calls. Generate up to 50 tests invoking cycpattern_check. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class CYCPATTERN_CHECK {

    public static boolean cycpattern_check(String a, String b) {
        int l = b.length();
        String pat = b + b;
        for (int i = 0; i < a.length() - l + 1; i += 1) {
            for (int j = 0; j < l + 1; j += 1) {
                if (a.substring(i, i + l).equals(pat.substring(j, j + l)))
                    return true;
            }
        }
        return false;
    }
}
