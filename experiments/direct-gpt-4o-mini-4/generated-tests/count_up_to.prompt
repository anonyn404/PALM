You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (count_up_to); ignore branches in other methods and API calls. Generate up to 50 tests invoking count_up_to. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
import java.util.List;
public class COUNT_UP_TO {

    public static List<Integer> count_up_to(int n) {
        List<Integer> primes = new ArrayList<Integer>();
        for (int i = 2; i < n; i += 1) {
            boolean is_prime = true;
            for (int j = 2; j < i; j += 1) {
                if (i % j == 0) {
                    is_prime = false;
                    break;
                }
            }
            if (is_prime)
                primes.add(i);
        }
        return primes;
    }
}
