You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (search); ignore branches in other methods and API calls. Generate up to 50 tests invoking search. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class SEARCH {

    public static int search(int[] lst) {
        int max = -1;
        for (Integer i : lst) {
            if (i > max)
                max = i;
        }
        int result = -1;
        int[] frq = new int[max + 1];
        for (int i = 0; i < lst.length; i += 1) frq[lst[i]] += 1;
        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i && frq[i] > 0)
            result = i;
        return result;
    }
}
