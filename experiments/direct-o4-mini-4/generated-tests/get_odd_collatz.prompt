You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (get_odd_collatz); ignore branches in other methods and API calls. Generate up to 50 tests invoking get_odd_collatz. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
import java.util.Collections;
public class GET_ODD_COLLATZ {

    public static ArrayList<Integer> get_odd_collatz(int n) {
        ArrayList<Integer> result = new ArrayList<>();
        if ((n % 2) == 1)
            result.add(n);
        while (n > 1) {
            if ((n % 2) == 0)
                n /= 2;
            else
                n = 3 * n + 1;
            if ((n % 2) == 1)
                result.add(n);
        }
        Collections.sort(result);
        return result;
    }
}
