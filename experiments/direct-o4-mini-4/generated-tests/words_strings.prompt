You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (words_strings); ignore branches in other methods and API calls. Generate up to 50 tests invoking words_strings. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
public class WORDS_STRINGS {

    public static ArrayList<String> words_strings(String s) {
        ArrayList<String> result = new ArrayList<String>();
        if (s == null || s.isEmpty())
            return result;
        String s_list = "";
        for (char c : s.toCharArray()) {
            if (c == ',') {
                s_list += ' ';
            } else {
                s_list += c;
            }
        }
        String[] result_array = s_list.trim().split("\\s+");
        for (String r : result_array) {
            result.add(r);
        }
        return result;
    }
}
