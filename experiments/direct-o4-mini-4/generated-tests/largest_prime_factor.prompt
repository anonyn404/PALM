You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (largest_prime_factor); ignore branches in other methods and API calls. Generate up to 50 tests invoking largest_prime_factor. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class LARGEST_PRIME_FACTOR {

    public static boolean is_prime(int k) {
        if (k < 2)
            return false;
        for (int i = 2; i < k; i += 1) {
            if (k % i == 0)
                return false;
        }
        return true;
    }

    public static int largest_prime_factor(int n) {
        int largest = 1;
        for (int j = 2; j < n; j += 1) {
            if (n % j == 0 && is_prime(j)) {
                largest = j;
            }
        }
        return largest;
    }
}
