You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (solve_string); ignore branches in other methods and API calls. Generate up to 50 tests invoking solve_string. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class SOLVE_STRING {

    public static String solve_string(String s) {
        int flg = 0;
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (Character.isAlphabetic(c)) {
                if (Character.isLowerCase(c))
                    sb.append(Character.toUpperCase(c));
                else
                    sb.append(Character.toLowerCase(c));
                flg = 1;
            } else
                sb.append(c);
        }
        if (flg == 0) {
            sb = new StringBuilder();
            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));
        }
        return sb.toString();
    }
}
