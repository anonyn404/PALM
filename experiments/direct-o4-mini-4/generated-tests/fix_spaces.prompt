You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (fix_spaces); ignore branches in other methods and API calls. Generate up to 50 tests invoking fix_spaces. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class FIX_SPACES {

    public static String fix_spaces(String text) {
        String new_text = "";
        int i = 0;
        int start = 0;
        int end = 0;
        while (i < text.length()) {
            if (text.charAt(i) == ' ')
                end += 1;
            else {
                if (end - start > 2)
                    new_text += "-" + text.substring(i, i + 1);
                else if (end - start > 0) {
                    for (int j = start; j < end; j += 1) {
                        new_text += "_";
                    }
                    new_text += text.substring(i, i + 1);
                } else {
                    new_text += text.substring(i, i + 1);
                }
                start = i + 1;
                end = i + 1;
            }
            i += 1;
        }
        if (end - start > 2)
            new_text += "-";
        else if (end - start > 0) {
            for (int j = start; j < end; j += 1) {
                new_text += "_";
            }
        }
        return new_text;
    }
}
