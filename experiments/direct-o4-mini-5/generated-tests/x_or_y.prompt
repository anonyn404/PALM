You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (x_or_y); ignore branches in other methods and API calls. Generate up to 50 tests invoking x_or_y. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class X_OR_Y {

    public static int x_or_y(int n, int x, int y) {
        if (n == 1)
            return y;
        for (int i = 2; i < n; i += 1) {
            if (n % i == 0)
                return y;
        }
        return x;
    }
}
