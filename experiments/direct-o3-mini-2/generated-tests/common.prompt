You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (common); ignore branches in other methods and API calls. Generate up to 50 tests invoking common. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.*;
public class COMMON {

    public static int[] common(int[] l1, int[] l2) {
        HashSet<Integer> common = new HashSet<Integer>();
        for (int i = 0; i < l1.length; i += 1) {
            for (int j = 0; j < l2.length; j += 1) {
                if (l1[i] == l2[j])
                    common.add(l1[i]);
            }
        }
        int[] result = new int[common.size()];
        int index = 0;
        for (Integer c : common) {
            result[index] = c;
            index += 1;
        }
        Arrays.sort(result);
        return result;
    }
}
