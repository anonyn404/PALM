You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (monotonic); ignore branches in other methods and API calls. Generate up to 50 tests invoking monotonic. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.Arrays;
public class MONOTONIC {

    public static boolean monotonic(int[] l) {
        int[] sorted = new int[l.length];
        int[] reverse_sorted = new int[l.length];
        System.arraycopy(l, 0, sorted, 0, l.length);
        Arrays.sort(sorted);
        for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1];
        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))
            return true;
        return false;
    }
}
