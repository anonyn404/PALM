You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (split_words); ignore branches in other methods and API calls. Generate up to 50 tests invoking split_words. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class SPLIT_WORDS {

    public static String[] split_words(String txt) {
        if (txt.contains(" ")) {
            return txt.split(" ");
        } else if (txt.contains(",")) {
            return txt.split(",");
        } else {
            int count = 0;
            for (int i = 0; i < txt.length(); i++) {
                char curr = txt.charAt(i);
                if (Character.isLowerCase(curr) && ((curr - 'a') % 2) == 1)
                    count++;
            }
            String[] result = { Integer.toString(count) };
            return result;
        }
    }
}
