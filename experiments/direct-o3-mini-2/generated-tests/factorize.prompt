You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (factorize); ignore branches in other methods and API calls. Generate up to 50 tests invoking factorize. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
import java.util.List;
public class FACTORIZE {

    public static List<Integer> factorize(int n) {
        List<Integer> result = new ArrayList<Integer>();
        int i = 2;
        while (i <= (int) (Math.sqrt(n) + 1)) {
            if (n % i == 0) {
                result.add(i);
                n = n / i;
            } else {
                i += 1;
            }
        }
        if (n > 1) {
            result.add(n);
        }
        return result;
    }
}
