You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (flip_case); ignore branches in other methods and API calls. Generate up to 50 tests invoking flip_case. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class FLIP_CASE {

    public static String flip_case(String string) {
        char[] char_list = string.toCharArray();
        for (int i = 0; i < char_list.length; i += 1) {
            char c = char_list[i];
            if (Character.isLowerCase(c)) {
                char_list[i] = Character.toUpperCase(c);
            } else {
                char_list[i] = Character.toLowerCase(c);
            }
        }
        return new String(char_list);
    }
}
