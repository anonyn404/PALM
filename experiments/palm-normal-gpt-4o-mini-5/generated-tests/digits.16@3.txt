You are a Java test generator. Invoke the target method (digits) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static int digits(int n){
    int product_1 = 1;
    int odd_count_1 = 0;
    assertTrue(n > 0); //[1]
    int digit_1 = n % 10;
    assertFalse(digit_1 % 2 == 1); //[2]
    n /= 10;
    assertTrue(n > 0); //[3]
    int digit_2 = n % 10;
    assertFalse(digit_2 % 2 == 1); //[4]
    n /= 10;
    assertFalse(n > 0); //[5]
    assertTrue(true); //[6]
    return 0;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
digits(220);
```
Error reason: the assertion [5] is not satisfied, assertFalse(n > 0) 
Round 1 generation:
```java
digits(200);
```
Error reason: the assertion [5] is not satisfied, assertFalse(n > 0) 
Round 2 generation:
```java
digits(2000);
```
Error reason: the assertion [5] is not satisfied, assertFalse(n > 0) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.