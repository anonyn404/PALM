You are a Java test generator. Invoke the target method (monotonic) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.Arrays;
public static boolean monotonic(int[] l){
    int[] sorted_1 = new int[l.length];
    int[] reverse_sorted_1 = new int[l.length];
    System.arraycopy(l, 0, sorted_1, 0, l.length);
    Arrays.sort(sorted_1);
    int i_1 = 0;
    assertTrue(0 < l.length); //[1]
    reverse_sorted_1[i_1] = sorted_1[l.length - 0 - 1];
    i_1 += 1;
    assertTrue(1 < l.length); //[2]
    reverse_sorted_1[i_1] = sorted_1[l.length - 1 - 1];
    i_1 += 1;
    assertFalse(2 < l.length); //[3]
    assertTrue(Arrays.equals(l, sorted_1) || Arrays.equals(l, reverse_sorted_1)); //[4]
    return true;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    // Test case that satisfies all assertions
    int[] testArray1 = {1, 2, 2, 3}; // Monotonic increasing
    assert monotonic(testArray1); 

    int[] testArray2 = {3, 2, 2, 1}; // Monotonic decreasing
    assert monotonic(testArray2); 

    int[] testArray3 = {1, 1, 1}; // Monotonic constant
    assert monotonic(testArray3); 

    int[] testArray4 = {}; // Edge case: Empty array
    assert monotonic(testArray4); 
    
    int[] testArray5 = {Integer.MIN_VALUE, Integer.MAX_VALUE}; // Edge case: Min and Max Int
    assert monotonic(testArray5); 
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(2 < l.length) 
Round 1 generation:
```java
public static void main(String args[]) { 
    // Test case that satisfies all assertions
    int[] testArray1 = {1, 2, 2, 3}; // Monotonic increasing
    assert monotonic(testArray1); 

    int[] testArray2 = {3, 2, 2, 1}; // Monotonic decreasing
    assert monotonic(testArray2); 

    int[] testArray3 = {1, 1, 1}; // Monotonic constant
    assert monotonic(testArray3); 

    int[] testArray4 = {1}; // Edge case: Single element array
    assert monotonic(testArray4); 
    
    int[] testArray5 = {2, 2}; // Edge case: Two same elements
    assert monotonic(testArray5); 
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(2 < l.length) 
Round 2 generation:
```java
public static void main(String args[]) { 
    // Test case that satisfies all assertions
    int[] testArray1 = {1, 2, 2, 3}; // Monotonic increasing
    assert monotonic(testArray1); 

    int[] testArray2 = {3, 2, 2, 1}; // Monotonic decreasing
    assert monotonic(testArray2); 

    int[] testArray3 = {1, 1, 1}; // Monotonic constant
    assert monotonic(testArray3); 

    int[] testArray4 = {1}; // Edge case: Single element array
    assert monotonic(testArray4); 
    
    int[] testArray5 = {2, 2}; // Edge case: Two same elements
    assert monotonic(testArray5); 
    
    int[] testArray6 = {0}; // Edge case: Single element 0
    assert monotonic(testArray6); 
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(2 < l.length) 
Round 3 generation:
```java
public static void main(String args[]) { 
    // Test case that satisfies all assertions
    int[] testArray1 = {1, 2, 2, 3}; // Monotonic increasing
    assert monotonic(testArray1); 

    int[] testArray2 = {3, 2, 2, 1}; // Monotonic decreasing
    assert monotonic(testArray2); 

    int[] testArray3 = {1, 1, 1}; // Monotonic constant
    assert monotonic(testArray3); 

    int[] testArray4 = {1}; // Edge case: Single element array
    assert monotonic(testArray4); 
    
    int[] testArray5 = {2, 2}; // Edge case: Two same elements
    assert monotonic(testArray5); 
    
    int[] testArray6 = {0}; // Edge case: Single element 0
    assert monotonic(testArray6); 
    
    int[] testArray7 = {Integer.MIN_VALUE}; // Edge case: Min Int
    assert monotonic(testArray7); 
    
    int[] testArray8 = {Integer.MAX_VALUE}; // Edge case: Max Int
    assert monotonic(testArray8); 
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(2 < l.length) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.