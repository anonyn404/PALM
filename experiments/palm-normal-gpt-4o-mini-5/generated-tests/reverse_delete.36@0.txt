You are a Java test generator. Invoke the target method (reverse_delete) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
public static ArrayList<Object> reverse_delete(String s, String c){
    String new_s_1 = "";
    int i_1 = 0;
    assertTrue(0 < s.length()); //[1]
    assertFalse(c.indexOf(s.charAt(0)) == -1); //[2]
    i_1++;
    assertTrue(1 < s.length()); //[3]
    assertFalse(c.indexOf(s.charAt(1)) == -1); //[4]
    i_1++;
    assertFalse(2 < s.length()); //[5]
    String reverse_s_1 = "";
    int i_2 = new_s_1.length() - 1;
    assertFalse(i_2 >= 0); //[6]
    ArrayList<Object> res_1 = new ArrayList<>();
    res_1.add(new_s_1);
    res_1.add(reverse_s_1.equals(new_s_1));
    return res_1;
}


** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.