You are a Java test generator. Invoke the target method (monotonic) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.Arrays;
public static boolean monotonic(int[] l){
    int[] sorted_1 = new int[l.length];
    int[] reverse_sorted_1 = new int[l.length];
    System.arraycopy(l, 0, sorted_1, 0, l.length);
    Arrays.sort(sorted_1);
    int i_1 = 0;
    assertFalse(0 < l.length); //[1]
    assertTrue(Arrays.equals(l, sorted_1) || Arrays.equals(l, reverse_sorted_1)); //[2]
    return true;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
    int[] l = {}; // Edge case: empty array
    assertTrue(monotonic(l));
    
    l = new int[]{1, 1, 1}; // All elements the same (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 2, 2, 3}; // Non-decreasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{3, 2, 2, 1}; // Non-increasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 2, 3}; // Strictly increasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{3, 2, 1}; // Strictly decreasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 3, 2}; // Not monotonic
    assertFalse(monotonic(l));
    
    l = null; // Edge case: null
    assertFalse(monotonic(l));
```
Error reason: Syntax error.
Round 1 generation:
```java
    int[] l = {1, 1, 1}; // All elements the same (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 2, 2, 3}; // Non-decreasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{3, 2, 2, 1}; // Non-increasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 2, 3}; // Strictly increasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{3, 2, 1}; // Strictly decreasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{}; // Edge case: empty array
    assertTrue(monotonic(l));
```
Error reason: Syntax error.
Round 2 generation:
```java
    int[] l = new int[]{1, 1, 1}; // All elements the same (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 2, 2, 3}; // Non-decreasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{3, 2, 2, 1}; // Non-increasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 2, 3}; // Strictly increasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{3, 2, 1}; // Strictly decreasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{}; // Edge case: empty array
    assertTrue(monotonic(l));
    
    l = null; // Edge case: null
    assertFalse(monotonic(l));
```
Error reason: Syntax error.
Round 3 generation:
```java
    int[] l = new int[]{1, 1, 1}; // All elements the same (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 2, 2, 3}; // Non-decreasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{3, 2, 2, 1}; // Non-increasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{1, 2, 3}; // Strictly increasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{3, 2, 1}; // Strictly decreasing (monotonic)
    assertTrue(monotonic(l));
    
    l = new int[]{}; // Edge case: empty array
    assertTrue(monotonic(l));
    
    l = null; // Edge case: null
    assertFalse(monotonic(l));
```
Error reason: Syntax error.
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.