You are a Java test generator. Invoke the target method (prime_fib) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
public static boolean is_prime(int n) {
    if (n < 2)
        return false;
    for (int i = 2; i < (int) Math.sqrt(n) + 1; i += 1) {
        if (n % i == 0)
            return false;
    }
    return true;
}
public static int prime_fib(int n){
    ArrayList<Integer> fib_1 = new ArrayList<Integer>();
    fib_1.add(0);
    fib_1.add(1);
    assertTrue(true); //[1]
    int len_1 = fib_1.size();
    fib_1.add(fib_1.get(len_1 - 1) + fib_1.get(len_1 - 2));
    assertFalse(is_prime(fib_1.get(fib_1.size() - 1))); //[2]
    assertFalse(n == 0); //[3]
    assertTrue(true); //[4]
    int len_2 = fib_1.size();
    fib_1.add(fib_1.get(len_2 - 1) + fib_1.get(len_2 - 2));
    assertFalse(is_prime(fib_1.get(fib_1.size() - 1))); //[5]
    assertTrue(n == 0); //[6]
    return fib_1.get(fib_1.size() - 1);
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
prime_fib(0);
```
Error reason: the assertion [3] is not satisfied, assertFalse(n == 0) 
Round 1 generation:
```java
prime_fib(1);
```
Error reason: the assertion [5] is not satisfied, assertFalse(is_prime(fib_1.get(fib_1.size() - 1))) 
Round 2 generation:
```java
prime_fib(2);
```
Error reason: the assertion [5] is not satisfied, assertFalse(is_prime(fib_1.get(fib_1.size() - 1))) 
Round 3 generation:
```java
prime_fib(5);
```
Error reason: the assertion [5] is not satisfied, assertFalse(is_prime(fib_1.get(fib_1.size() - 1))) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.