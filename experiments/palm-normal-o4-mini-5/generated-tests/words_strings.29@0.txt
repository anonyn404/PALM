You are a Java test generator. Invoke the target method (words_strings) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
public static void words_strings(String s){
    ArrayList<String> result_1 = new ArrayList<String>();
    assertFalse(s == null || s.isEmpty()); //[1]
    String s_list_1 = "";
    char[] c_array_1 = s.toCharArray();
    char c_1;
    assertTrue(0 < c_array_1.length); //[2]
    c_1 = c_array_1[0];
    assertTrue(c_1 == ','); //[3]
    s_list_1 += ' ';
    assertTrue(1 < c_array_1.length); //[4]
    c_1 = c_array_1[1];
    assertTrue(c_1 == ','); //[5]
    s_list_1 += ' ';
    assertFalse(2 < c_array_1.length); //[6]
    String[] result_array_1 = s_list_1.trim().split("\\s+");
    String r_1;
    assertTrue(0 < result_array_1.length); //[7]
}


** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.