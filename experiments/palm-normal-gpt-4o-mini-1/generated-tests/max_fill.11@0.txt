You are a Java test generator. Invoke the target method (max_fill) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void max_fill(int[][] grid, int bucket_capacity){
    int result_1 = 0;
    int i_1 = 0;
    assertTrue(0 < grid.length); //[1]
    int row_capacity_1 = 0;
    int j_1 = 0;
    assertTrue(0 < grid[0].length); //[2]
    row_capacity_1 += grid[0][0];
    j_1++;
    assertFalse(1 < grid[0].length); //[3]
    result_1 += (row_capacity_1 + bucket_capacity - 1) / bucket_capacity;
    i_1++;
    assertTrue(1 < grid.length); //[4]
}


** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.