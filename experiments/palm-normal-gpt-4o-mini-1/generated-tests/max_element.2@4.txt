You are a Java test generator. Invoke the target method (max_element) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.List;
public static void max_element(List<Integer> l){
    int m_1 = l.get(0);
    Iterator<Integer> e_iter_1 = l.iterator();
    Integer e_1;
    assertTrue(e_iter_1.hasNext()); //[1]
    e_1 = e_iter_1.next();
    assertTrue(e_1 > m_1); //[2]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
List<Integer> l = Arrays.asList(2, 3);
max_element(l);
```
Error reason: the assertion [2] is not satisfied, assertTrue(e_1 > m_1) 
Round 1 generation:
```java
List<Integer> l = Arrays.asList(1, 2);
max_element(l);
```
Error reason: the assertion [2] is not satisfied, assertTrue(e_1 > m_1) 
Round 2 generation:
```java
List<Integer> l = Arrays.asList(3, 2);
max_element(l);
```
Error reason: the assertion [2] is not satisfied, assertTrue(e_1 > m_1) 
Round 3 generation:
```java
List<Integer> l = Arrays.asList(1, 2); max_element(l);
```
Error reason: the assertion [2] is not satisfied, assertTrue(e_1 > m_1) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.