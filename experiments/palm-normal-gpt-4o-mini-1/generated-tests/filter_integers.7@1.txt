You are a Java test generator. Invoke the target method (filter_integers) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.List;
public static List<Integer> filter_integers(List<Object> values){
    List<Integer> result_1 = new ArrayList<Integer>();
    Iterator<Object> value_iter_1 = values.iterator();
    Object value_1;
    assertTrue(value_iter_1.hasNext()); //[1]
    value_1 = value_iter_1.next();
    assertTrue(value_1 instanceof Integer); //[2]
    result_1.add((Integer) value_1);
    assertFalse(value_iter_1.hasNext()); //[3]
    return result_1;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    List<Object> values = new ArrayList<>();
    values.add(42);
    values.add("not an integer"); // ensuring that the second item is ignored
    filter_integers(values);
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(value_iter_1.hasNext()) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.