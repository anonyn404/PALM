You are a Java test generator. Invoke the target method (largest_prime_factor) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static boolean is_prime(int k) {
    if (k < 2)
        return false;
    for (int i = 2; i < k; i += 1) {
        if (k % i == 0)
            return false;
    }
    return true;
}
public static void largest_prime_factor(int n){
    int largest_1 = 1;
    int j_1 = 2;
    assertTrue(2 < n); //[1]
    assertFalse(n % 2 == 0 && is_prime(2)); //[2]
    j_1 += 1;
    assertTrue(3 < n); //[3]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
largest_prime_factor(3);
```
Error reason: the assertion [3] is not satisfied, assertTrue(3 < n) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.