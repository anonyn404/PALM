You are a Java test generator. Invoke the target method (rounded_avg) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static String rounded_avg(int n, int m){
    assertFalse(m < n); //[1]
    int summation_1 = 0;
    int i_1 = n;
    assertTrue(i_1 < m + 1); //[2]
    summation_1 += i_1;
    i_1++;
    assertTrue(i_1 < m + 1); //[3]
    summation_1 += i_1;
    i_1++;
    assertFalse(i_1 < m + 1); //[4]
    double avg_1 = ((double) summation_1) / ((double) (m - n + 1));
    double rem_1 = avg_1 - Math.floor(avg_1);
    int avg_rounded_1 = 0;
    assertFalse(rem_1 <= 0.5); //[5]
    avg_rounded_1 = (int) Math.ceil(avg_1);
    return Integer.toBinaryString(avg_rounded_1);
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
    String result = rounded_avg(0, 2);
```
Error reason: the assertion [4] is not satisfied, assertFalse(i_1 < m + 1) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.