You are a Java test generator. Invoke the target method (monotonic) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.Arrays;
public static boolean monotonic(int[] l){
    int[] sorted_1 = new int[l.length];
    int[] reverse_sorted_1 = new int[l.length];
    System.arraycopy(l, 0, sorted_1, 0, l.length);
    Arrays.sort(sorted_1);
    int i_1 = 0;
    assertTrue(0 < l.length); //[1]
    reverse_sorted_1[i_1] = sorted_1[l.length - 0 - 1];
    i_1 += 1;
    assertTrue(1 < l.length); //[2]
    reverse_sorted_1[i_1] = sorted_1[l.length - 1 - 1];
    i_1 += 1;
    assertFalse(2 < l.length); //[3]
    assertTrue(Arrays.equals(l, sorted_1) || Arrays.equals(l, reverse_sorted_1)); //[4]
    return true;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    int[] testArray = {1, 2, 3, 4, 5}; // Monotonic increasing
    assert monotonic(testArray); 

    testArray = new int[]{5, 4, 3, 2, 1}; // Monotonic decreasing
    assert monotonic(testArray);

    testArray = new int[]{2, 2, 2}; // Monotonic constant
    assert monotonic(testArray);

    testArray = new int[]{}; // Edge case empty array
    assert !monotonic(testArray); // Should not pass assertTrue since length is 0

    testArray = null; // Edge case null array
    assert !monotonic(testArray); // Should not pass assertTrue since length is 0
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(2 < l.length) 
Round 1 generation:
```java
public static void main(String args[]) { 
    int[] testArray = {1, 2, 3, 4, 5}; // Monotonic increasing
    assert monotonic(testArray); 

    testArray = new int[]{5, 4, 3, 2, 1}; // Monotonic decreasing
    assert monotonic(testArray);

    testArray = new int[]{2, 2, 2}; // Monotonic constant
    assert monotonic(testArray);

    testArray = new int[]{1}; // Edge case with one element
    assert monotonic(testArray); // Length is 1, should pass
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(2 < l.length) 
Round 2 generation:
```java
public static void main(String args[]) { 
    int[] testArray = {1, 2, 3, 4, 5}; // Monotonic increasing
    assert monotonic(testArray); 

    testArray = new int[]{5, 4, 3, 2, 1}; // Monotonic decreasing
    assert monotonic(testArray);

    testArray = new int[]{2, 2, 2}; // Monotonic constant
    assert monotonic(testArray);

    testArray = new int[]{1}; // Edge case with one element
    assert monotonic(testArray); // Length is 1, should pass

    testArray = new int[]{1, 2}; // Two elements increasing
    assert monotonic(testArray); // Should pass

    testArray = new int[]{2, 1}; // Two elements decreasing
    assert monotonic(testArray); // Should pass
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(2 < l.length) 
Round 3 generation:
```java
public static void main(String args[]) { 
    int[] testArray = {1}; // Single element, all assertions should pass
    assert monotonic(testArray); 

    testArray = new int[]{1, 2}; // Two elements increasing
    assert monotonic(testArray); 

    testArray = new int[]{2, 1}; // Two elements decreasing
    assert monotonic(testArray); 

    testArray = new int[]{1, 1}; // Two elements constant
    assert monotonic(testArray); 
}
```
Error reason: the assertion [2] is not satisfied, assertTrue(1 < l.length) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.