You are a Java test generator. Invoke the target method (will_it_fly) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void will_it_fly(int[] q, int w){
    int sum_1 = 0;
    int i_1 = 0;
    assertTrue(0 < q.length); //[1]
    sum_1 += q[0];
    i_1 += 1;
    assertTrue(1 < q.length); //[2]
    sum_1 += q[1];
    i_1 += 1;
    assertFalse(2 < q.length); //[3]
    assertFalse(sum_1 > w); //[4]
    int i_2 = 0;
    int j_1 = q.length - 1;
    assertTrue(0 < j_1); //[5]
    assertFalse(q[0] != q[j_1]); //[6]
    i_2 += 1;
    j_1 -= 1;
    assertTrue(1 < j_1); //[7]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
will_it_fly(new int[]{1, 1}, 2);
```
Error reason: the assertion [7] is not satisfied, assertTrue(1 < j_1) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.