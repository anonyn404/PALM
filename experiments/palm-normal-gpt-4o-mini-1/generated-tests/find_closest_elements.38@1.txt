You are a Java test generator. Invoke the target method (find_closest_elements) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void find_closest_elements(double[] numbers){
    double[] result_1 = new double[2];
    double distance_1 = Double.MAX_VALUE;
    int i_1 = 0;
    assertTrue(0 < numbers.length); //[1]
    int j_1 = 1;
    assertTrue(1 < numbers.length); //[2]
    double new_distance_1 = Math.abs(numbers[0] - numbers[1]);
    assertTrue(new_distance_1 < distance_1); //[3]
    distance_1 = new_distance_1;
    assertTrue(numbers[0] < numbers[1]); //[4]
    result_1[0] = numbers[0];
    result_1[1] = numbers[1];
    j_1 += 1;
    assertFalse(2 < numbers.length); //[5]
    i_1 += 1;
    assertTrue(1 < numbers.length); //[6]
    int j_2 = 2;
    assertTrue(2 < numbers.length); //[7]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
find_closest_elements(new double[]{1.0, 2.0});
```
Error reason: the assertion [7] is not satisfied, assertTrue(2 < numbers.length) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.