You are a Java test generator. Invoke the target method (generate_integers) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
public static ArrayList<Integer> generate_integers(int a, int b){
    int lower_1 = Math.max(2, Math.min(a, b));
    int upper_1 = Math.min(8, Math.max(a, b));
    ArrayList<Integer> result_1 = new ArrayList<Integer>();
    int i_1 = lower_1;
    assertTrue(i_1 <= upper_1); //[1]
    assertFalse(i_1 % 2 == 0); //[2]
    i_1 += 1;
    assertFalse(i_1 <= upper_1); //[3]
    return result_1;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
generate_integers(1, 3);
```
Error reason: the assertion [2] is not satisfied, assertFalse(i_1 % 2 == 0) 
Round 1 generation:
```java
generate_integers(3, 7);
```
Error reason: the assertion [3] is not satisfied, assertFalse(i_1 <= upper_1) 
Round 2 generation:
```java
generate_integers(8, 10);
```
Error reason: the assertion [2] is not satisfied, assertFalse(i_1 % 2 == 0) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.