You are a Java test generator. Invoke the target method (largest_smallest_integers) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void largest_smallest_integers(int[] lst){
    boolean negative_1 = false, positive_1 = false;
    int max_negative_1 = Integer.MIN_VALUE, min_positive_1 = Integer.MAX_VALUE;
    int i_1 = 0;
    assertTrue(0 < lst.length); //[1]
    assertTrue(lst[0] < 0); //[2]
    negative_1 = true;
    max_negative_1 = Math.max(max_negative_1, lst[0]);
    i_1++;
    assertFalse(1 < lst.length); //[3]
    assertTrue(!true); //[4]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
largest_smallest_integers(new int[]{-1});
```
Error reason: the assertion [4] is not satisfied, assertTrue(!true) 
Round 1 generation:
```java
largest_smallest_integers(new int[]{-1, -2});
```
Error reason: the assertion [3] is not satisfied, assertFalse(1 < lst.length) 
Round 2 generation:
```java
largest_smallest_integers(new int[]{-1}, new int[]{-2});
```
Error reason: Syntax error.
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.