You are a Java test generator. Invoke the target method (change_base) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static String change_base(int x, int base){
    String result_1 = "";
    assertTrue(x > 0); //[1]
    result_1 = (x % base) + result_1;
    x = (int) x / base;
    assertTrue(x > 0); //[2]
    result_1 = (x % base) + result_1;
    x = (int) x / base;
    assertFalse(x > 0); //[3]
    return result_1;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
change_base(10, 2);
```
Error reason: the assertion [3] is not satisfied, assertFalse(x > 0) 
Round 1 generation:
```java
change_base(4, 2);
```
Error reason: the assertion [3] is not satisfied, assertFalse(x > 0) 
Round 2 generation:
```java
change_base(1, 2);
```
Error reason: the assertion [2] is not satisfied, assertTrue(x > 0) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.