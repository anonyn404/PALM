You are a Java test generator. Invoke the target method (remove_duplicates) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
public static void remove_duplicates(List<Integer> numbers){
    List<Integer> result_1 = new ArrayList<Integer>();
    HashMap<Integer, Integer> count_1 = new HashMap<Integer, Integer>();
    Iterator<Integer> n_iter_1 = numbers.iterator();
    Integer n_1;
    assertFalse(n_iter_1.hasNext()); //[1]
    Iterator<Integer> n_iter_2 = numbers.iterator();
    Integer n_2;
    assertTrue(n_iter_2.hasNext()); //[2]
    n_2 = n_iter_2.next();
    assertFalse(count_1.get(n_2) == 1); //[3]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
List<Integer> customList = new List<Integer>() {
    boolean firstCall = true;
    public Iterator<Integer> iterator() {
        if (firstCall) {
            firstCall = false;
            return Collections.emptyIterator();
        } else {
            return Arrays.asList(42).iterator();
        }
    }
    public int size() { throw new UnsupportedOperationException(); }
    public boolean isEmpty() { throw new UnsupportedOperationException(); }
    public boolean contains(Object o) { throw new UnsupportedOperationException(); }
    public Object[] toArray() { throw new UnsupportedOperationException(); }
    public <T> T[] toArray(T[] a) { throw new UnsupportedOperationException(); }
    public boolean add(Integer e) { throw new UnsupportedOperationException(); }
    public boolean remove(Object o) { throw new UnsupportedOperationException(); }
    public boolean containsAll(Collection<?> c) { throw new UnsupportedOperationException(); }
    public boolean addAll(Collection<? extends Integer> c) { throw new UnsupportedOperationException(); }
    public boolean addAll(int index, Collection<? extends Integer> c) { throw new UnsupportedOperationException(); }
    public boolean removeAll(Collection<?> c) { throw new UnsupportedOperationException(); }
    public boolean retainAll(Collection<?> c) { throw new UnsupportedOperationException(); }
    public void clear() { throw new UnsupportedOperationException(); }
    public Integer get(int index) { throw new UnsupportedOperationException(); }
    public Integer set(int index, Integer element) { throw new UnsupportedOperationException(); }
    public void add(int index, Integer element) { throw new UnsupportedOperationException(); }
    public Integer remove(int index) { throw new UnsupportedOperationException(); }
    public int indexOf(Object o) { throw new UnsupportedOperationException(); }
    public int lastIndexOf(Object o) { throw new UnsupportedOperationException(); }
    public ListIterator<Integer> listIterator() { throw new UnsupportedOperationException(); }
    public ListIterator<Integer> listIterator(int index) { throw new UnsupportedOperationException(); }
    public List<Integer> subList(int fromIndex, int toIndex) { throw new UnsupportedOperationException(); }
};
remove_duplicates(customList);
```
Error reason: Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.lang.Integer.intValue()" because the return value of "java.util.HashMap.get(Object)" is null
	at REMOVE_DUPLICATES.remove_duplicates(remove_duplicates.9.java:19)
	at REMOVE_DUPLICATES.main(remove_duplicates.9.java:58)

** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.