You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (sort_array); ignore branches in other methods and API calls. Generate up to 50 tests invoking sort_array. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.Arrays;
public class SORT_ARRAY {

    public static int[] sort_array(int[] array) {
        if (array.length == 0)
            return array;
        Arrays.sort(array);
        if ((array[0] + array[array.length - 1]) % 2 == 1)
            return array;
        else {
            for (int i = 0; i < array.length / 2; i += 1) {
                int tmp = array[i];
                array[i] = array[array.length - i - 1];
                array[array.length - i - 1] = tmp;
            }
            return array;
        }
    }
}
