You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (iscude); ignore branches in other methods and API calls. Generate up to 50 tests invoking iscude. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
public class ISCUDE {

    public static boolean iscude(int a) {
        a = Math.abs(a);
        double root = Math.pow(a, 1. / 3);
        BigDecimal bd = BigDecimal.valueOf(root);
        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();
        return ((int) Math.pow(round_root, 3)) == a;
    }
}
