You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (tri); ignore branches in other methods and API calls. Generate up to 50 tests invoking tri. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class TRI {

    public static int[] tri(int n) {
        int[] sequence = new int[n + 1];
        if (n == 0) {
            sequence[0] = 1;
            return sequence;
        }
        sequence[0] = 1;
        sequence[1] = 3;
        for (int i = 2; i < n + 1; i++) {
            if (i % 2 == 0)
                sequence[i] = i / 2 + 1;
            else
                sequence[i] = sequence[i - 1] + sequence[i - 2] + (i + 3) / 2;
        }
        return sequence;
    }
}
