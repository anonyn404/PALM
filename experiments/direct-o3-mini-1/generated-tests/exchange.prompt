You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (exchange); ignore branches in other methods and API calls. Generate up to 50 tests invoking exchange. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
public class EXCHANGE {

    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {
        int odd = 0, even = 0;
        for (int i : lst1) {
            if ((i % 2) == 1)
                odd++;
        }
        for (int i : lst2) {
            if ((i % 2) == 0)
                even++;
        }
        if (even >= odd) {
            return "YES";
        }
        return "NO";
    }
}
