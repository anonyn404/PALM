You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (even_odd_count); ignore branches in other methods and API calls. Generate up to 50 tests invoking even_odd_count. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class EVEN_ODD_COUNT {

    public static int[] even_odd_count(int num) {
        int even_count = 0;
        int odd_count = 0;
        for (char c : (Math.abs(num) + "").toCharArray()) {
            int n = c - '0';
            if (n % 2 == 0)
                even_count += 1;
            if (n % 2 == 1)
                odd_count += 1;
        }
        return new int[] { even_count, odd_count };
    }
}
