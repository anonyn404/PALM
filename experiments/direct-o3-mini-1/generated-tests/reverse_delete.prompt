You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (reverse_delete); ignore branches in other methods and API calls. Generate up to 50 tests invoking reverse_delete. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
public class REVERSE_DELETE {

    public static ArrayList<Object> reverse_delete(String s, String c) {
        String new_s = "";
        for (int i = 0; i < s.length(); i++) {
            if (c.indexOf(s.charAt(i)) == -1) {
                new_s += s.charAt(i);
            }
        }
        String reverse_s = "";
        for (int i = new_s.length() - 1; i >= 0; i--) {
            reverse_s += new_s.charAt(i);
        }
        ArrayList<Object> res = new ArrayList<>();
        res.add(new_s);
        res.add(reverse_s.equals(new_s));
        return res;
    }
}
