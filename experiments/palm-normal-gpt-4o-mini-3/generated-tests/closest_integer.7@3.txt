You are a Java test generator. Invoke the target method (closest_integer) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static int closest_integer(String value){
    assertFalse(value.indexOf('.') >= 0); //[1]
    double num_1 = Double.parseDouble(value);
    int result_1 = 0;
    assertFalse(value.length() >= 2 && value.substring(value.length() - 2).equals(".5")); //[2]
    assertFalse(value.length() > 0); //[3]
    return 0;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
closest_integer("123");
```
Error reason: the assertion [3] is not satisfied, assertFalse(value.length() > 0) 
Round 1 generation:
```java
closest_integer("0");
```
Error reason: the assertion [3] is not satisfied, assertFalse(value.length() > 0) 
Round 2 generation:
```java
closest_integer("");
```
Error reason: Exception in thread "main" java.lang.NumberFormatException: empty String
	at java.base/jdk.internal.math.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1842)
	at java.base/jdk.internal.math.FloatingDecimal.parseDouble(FloatingDecimal.java:110)
	at java.base/java.lang.Double.parseDouble(Double.java:651)
	at CLOSEST_INTEGER.closest_integer(closest_integer.7.java:8)
	at CLOSEST_INTEGER.main(closest_integer.7.java:18)

** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.