You are a Java test generator. Invoke the target method (smallest_change) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void smallest_change(int[] arr){
    int result_1 = 0;
    int i_1 = 0;
    assertTrue(0 < arr.length / 2); //[1]
    assertFalse(arr[0] != arr[arr.length - 0 - 1]); //[2]
    i_1 += 1;
    assertTrue(1 < arr.length / 2); //[3]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
int[] arr = {1, 1}; // This satisfies all conditions
smallest_change(arr);
```
Error reason: the assertion [3] is not satisfied, assertTrue(1 < arr.length / 2) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.