You are a Java test generator. Invoke the target method (exchange) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
public static void exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2){
    int odd_1 = 0, even_1 = 0;
    Iterator<Integer> i_iter_1 = lst1.iterator();
    int i_1;
    assertTrue(i_iter_1.hasNext()); //[1]
    i_1 = i_iter_1.next();
    assertTrue((i_1 % 2) == 1); //[2]
    odd_1++;
    assertFalse(i_iter_1.hasNext()); //[3]
    Iterator<Integer> i_iter_2 = lst2.iterator();
    int i_2;
    assertTrue(i_iter_2.hasNext()); //[4]
    i_2 = i_iter_2.next();
    assertFalse((i_2 % 2) == 0); //[5]
    assertTrue(i_iter_2.hasNext()); //[6]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
ArrayList<Integer> lst1 = new ArrayList<>(Arrays.asList(3));
ArrayList<Integer> lst2 = new ArrayList<>(Arrays.asList(4, 5));
exchange(lst1, lst2);
```
Error reason: the assertion [5] is not satisfied, assertFalse((i_2 % 2) == 0) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.