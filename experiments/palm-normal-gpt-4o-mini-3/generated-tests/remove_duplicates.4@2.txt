You are a Java test generator. Invoke the target method (remove_duplicates) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
public static void remove_duplicates(List<Integer> numbers){
    List<Integer> result_1 = new ArrayList<Integer>();
    HashMap<Integer, Integer> count_1 = new HashMap<Integer, Integer>();
    Iterator<Integer> n_iter_1 = numbers.iterator();
    Integer n_1;
    assertFalse(n_iter_1.hasNext()); //[1]
    Iterator<Integer> n_iter_2 = numbers.iterator();
    Integer n_2;
    assertTrue(n_iter_2.hasNext()); //[2]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    remove_duplicates(new ArrayList<Integer>()); // empty list for [1]
    remove_duplicates(Arrays.asList(1)); // non-empty list for [2]
}
```
Error reason: the assertion [2] is not satisfied, assertTrue(n_iter_2.hasNext()) 
Round 1 generation:
```java
public static void main(String args[]) { 
    remove_duplicates(Arrays.asList(1, 2, 3)); // non-empty list for both [1] and [2]
}
```
Error reason: the assertion [1] is not satisfied, assertFalse(n_iter_1.hasNext()) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.