You are a Java test generator. Invoke the target method (parse_music) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
public static void parse_music(String music_string){
    HashMap<String, Integer> note_map_1 = new HashMap<String, Integer>();
    note_map_1.put("o", 4);
    note_map_1.put("o|", 2);
    note_map_1.put(".|", 1);
    List<Integer> result_1 = new ArrayList<Integer>();
    assertFalse(music_string.trim().equals("")); //[1]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
parse_music(" ");
```
Error reason: the assertion [1] is not satisfied, assertFalse(music_string.trim().equals("")) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.