You are a Java test generator. Invoke the target method (pluck) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static int[] pluck(int[] arr){
    int min_even_1 = Integer.MAX_VALUE;
    int index_1 = -1;
    int i_1 = 0;
    assertFalse(0 < arr.length); //[1]
    assertFalse(index_1 == -1); //[2]
    return new int[] { min_even_1, index_1 };
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
int[] arr = new int[0]; // Edge case: empty array
pluck(arr);
```
Error reason: the assertion [2] is not satisfied, assertFalse(index_1 == -1) 
Round 1 generation:
```java
int[] arr = new int[]{2, 4, 6}; // Including even numbers ensures index_1 is updated
pluck(arr);
```
Error reason: the assertion [1] is not satisfied, assertFalse(0 < arr.length) 
Round 2 generation:
```java
int[] arr = new int[]{1}; // Single element to ensure index_1 is updated
pluck(arr);
```
Error reason: the assertion [1] is not satisfied, assertFalse(0 < arr.length) 
Round 3 generation:
```java
int[] arr = new int[]{1, 2}; // Even with an even number ensures index_1 is updated
pluck(arr);
```
Error reason: the assertion [1] is not satisfied, assertFalse(0 < arr.length) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.