You are a Java test generator. Invoke the target method (any_int) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static boolean any_int(double x, double y, double z){
    assertFalse((int) x == x && (int) y == y && (int) z == z); //[1]
    return false;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
any_int(1.0, 2.0, 3.0);
```
Error reason: the assertion [1] is not satisfied, assertFalse((int) x == x && (int) y == y && (int) z == z) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.