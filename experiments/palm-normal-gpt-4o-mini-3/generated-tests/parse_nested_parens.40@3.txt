You are a Java test generator. Invoke the target method (parse_nested_parens) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.List;
public static List<Integer> parse_nested_parens(String paren_string){
    String[] paren_groups_1 = paren_string.split(" ");
    List<Integer> result_1 = new ArrayList<Integer>();
    String paren_group_1;
    assertTrue(0 < paren_groups_1.length); //[1]
    paren_group_1 = paren_groups_1[0];
    int depth_1 = 0;
    int max_depth_1 = 0;
    char[] c_array_1 = paren_group_1.toCharArray();
    char c_1;
    assertTrue(0 < c_array_1.length); //[2]
    c_1 = c_array_1[0];
    assertTrue(c_1 == '('); //[3]
    depth_1 += 1;
    max_depth_1 = Math.max(1, 0);
    assertTrue(1 < c_array_1.length); //[4]
    c_1 = c_array_1[1];
    assertTrue(c_1 == '('); //[5]
    depth_1 += 1;
    max_depth_1 = Math.max(2, max_depth_1);
    assertFalse(2 < c_array_1.length); //[6]
    result_1.add(max_depth_1);
    assertFalse(1 < paren_groups_1.length); //[7]
    return result_1;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    System.out.println(parse_nested_parens("(( )),(( ))")); 
}
```
Error reason: the assertion [7] is not satisfied, assertFalse(1 < paren_groups_1.length) 
Round 1 generation:
```java
public static void main(String args[]) { 
    System.out.println(parse_nested_parens("(( ))")); 
}
```
Error reason: the assertion [7] is not satisfied, assertFalse(1 < paren_groups_1.length) 
Round 2 generation:
```java
public static void main(String args[]) { 
    System.out.println(parse_nested_parens("(((")); 
}
```
Error reason: the assertion [6] is not satisfied, assertFalse(2 < c_array_1.length) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.