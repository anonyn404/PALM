You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (find_closest_elements); ignore branches in other methods and API calls. Generate up to 50 tests invoking find_closest_elements. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
public class FIND_CLOSEST_ELEMENTS {

    public static double[] find_closest_elements(double[] numbers) {
        double[] result = new double[2];
        double distance = Double.MAX_VALUE;
        for (int i = 0; i < numbers.length; i += 1) {
            for (int j = i + 1; j < numbers.length; j += 1) {
                double new_distance = Math.abs(numbers[i] - numbers[j]);
                if (new_distance < distance) {
                    distance = new_distance;
                    if (numbers[i] < numbers[j]) {
                        result[0] = numbers[i];
                        result[1] = numbers[j];
                    } else {
                        result[0] = numbers[j];
                        result[1] = numbers[i];
                    }
                }
            }
        }
        return result;
    }
}
