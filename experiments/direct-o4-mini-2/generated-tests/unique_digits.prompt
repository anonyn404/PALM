You are a symbolic‐execution‐based Java unit‐test generator. Consider loop‑bound=2. For recursive functions, depth-bound=2. Only enumerate paths in the target method (unique_digits); ignore branches in other methods and API calls. Generate up to 50 tests invoking unique_digits. Output each invocation as its own triple‑backtick code block. No comments or explanations.

** Example input **
boolean foo(int num) {
    if (num > 0) return true;
    else if (num < 0) return true;
    else return false;
}
** Example output **
```java
foo(5);
```
```java
foo(-5);
```
```java
foo(0);
```

** Program **
import java.util.*;
import java.util.ArrayList;
import java.util.Collections;
public class UNIQUE_DIGITS {

    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        for (int i : x) {
            int num = i;
            boolean all_odd = true;
            while (num > 0) {
                int curr_digit = num % 10;
                if ((curr_digit % 2) == 0) {
                    all_odd = false;
                    break;
                }
                num /= 10;
            }
            if (all_odd) {
                res.add(i);
            }
        }
        Collections.sort(res);
        return res;
    }
}
