You are a Java test generator. Invoke the target method (sort_array) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.Arrays;
public static int[] sort_array(int[] array){
    assertFalse(array.length == 0); //[1]
    Arrays.sort(array);
    assertFalse((array[0] + array[array.length - 1]) % 2 == 1); //[2]
    int i_1 = 0;
    assertTrue(0 < array.length / 2); //[3]
    int tmp_1 = array[0];
    array[i_1] = array[array.length - 0 - 1];
    array[array.length - i_1 - 1] = tmp_1;
    i_1 += 1;
    assertTrue(1 < array.length / 2); //[4]
    int tmp_2 = array[1];
    array[i_1] = array[array.length - 1 - 1];
    array[array.length - i_1 - 1] = tmp_2;
    i_1 += 1;
    assertFalse(2 < array.length / 2); //[5]
    return array;
}


** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.