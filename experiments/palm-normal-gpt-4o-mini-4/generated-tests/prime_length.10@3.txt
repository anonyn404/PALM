You are a Java test generator. Invoke the target method (prime_length) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static boolean prime_length(String string){
    int l_1 = string.length();
    assertFalse(l_1 <= 1); //[1]
    int i_1 = 2;
    assertTrue(2 < l_1); //[2]
    assertFalse(l_1 % 2 == 0); //[3]
    i_1 += 1;
    assertTrue(3 < l_1); //[4]
    assertFalse(l_1 % 3 == 0); //[5]
    i_1 += 1;
    assertFalse(4 < l_1); //[6]
    return true;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    prime_length("abc"); 
}
```
Error reason: the assertion [4] is not satisfied, assertTrue(3 < l_1) 
Round 1 generation:
```java
public static void main(String args[]) { 
    prime_length("abcde"); 
}
```
Error reason: the assertion [6] is not satisfied, assertFalse(4 < l_1) 
Round 2 generation:
```java
public static void main(String args[]) { 
    prime_length("xyz"); 
}
```
Error reason: the assertion [4] is not satisfied, assertTrue(3 < l_1) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.