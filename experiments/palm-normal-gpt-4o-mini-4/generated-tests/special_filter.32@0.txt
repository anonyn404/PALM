You are a Java test generator. Invoke the target method (special_filter) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.Arrays;
public static int special_filter(int[] nums){
    int count_1 = 0;
    ArrayList<Integer> odd_digits_1 = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));
    Integer num_1;
    assertTrue(0 < nums.length); //[1]
    num_1 = nums[0];
    assertTrue(num_1 > 10); //[2]
    String number_as_string_1 = num_1 + "";
    assertTrue(odd_digits_1.contains(number_as_string_1.charAt(0) - '0') && odd_digits_1.contains(number_as_string_1.charAt(number_as_string_1.length() - 1) - '0')); //[3]
    count_1 += 1;
    assertTrue(1 < nums.length); //[4]
    num_1 = nums[1];
    assertTrue(num_1 > 10); //[5]
    String number_as_string_2 = num_1 + "";
    assertTrue(odd_digits_1.contains(number_as_string_2.charAt(0) - '0') && odd_digits_1.contains(number_as_string_2.charAt(number_as_string_2.length() - 1) - '0')); //[6]
    count_1 += 1;
    assertFalse(2 < nums.length); //[7]
    return 2;
}


** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.