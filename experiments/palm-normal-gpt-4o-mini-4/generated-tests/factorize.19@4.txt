You are a Java test generator. Invoke the target method (factorize) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.List;
public static void factorize(int n){
    List<Integer> result_1 = new ArrayList<Integer>();
    int i_1 = 2;
    assertTrue(2 <= (int) (Math.sqrt(n) + 1)); //[1]
    assertTrue(n % 2 == 0); //[2]
    result_1.add(2);
    n = n / 2;
    assertTrue(2 <= (int) (Math.sqrt(n) + 1)); //[3]
    assertFalse(n % 2 == 0); //[4]
    i_1 += 1;
    assertFalse(3 <= (int) (Math.sqrt(n) + 1)); //[5]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { factorize(4); }
```
Error reason: the assertion [4] is not satisfied, assertFalse(n % 2 == 0) 
Round 1 generation:
```java
public static void main(String args[]) { factorize(3); }
```
Error reason: the assertion [2] is not satisfied, assertTrue(n % 2 == 0) 
Round 2 generation:
```java
public static void main(String args[]) { factorize(8); }
```
Error reason: the assertion [4] is not satisfied, assertFalse(n % 2 == 0) 
Round 3 generation:
```java
public static void main(String args[]) { factorize(5); }
```
Error reason: the assertion [2] is not satisfied, assertTrue(n % 2 == 0) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.