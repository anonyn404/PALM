You are a Java test generator. Invoke the target method (int_to_mini_roman) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static String int_to_mini_roman(int number){
    int[] num_1 = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };
    String[] sym_1 = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" };
    int i_1 = 12;
    String result_1 = "";
    assertFalse(number > 0); //[1]
    return result_1.toLowerCase();
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
assertTrue(int_to_mini_roman(0).equals("")); 
```
Error reason: Syntax error.
Round 1 generation:
```java
// write you code here
assertTrue(int_to_mini_roman(-1).equals("")); 
```
Error reason: Syntax error.
Round 2 generation:
```java
assertTrue(int_to_mini_roman(0).equals("")); 
```
Error reason: Syntax error.
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.