You are a Java test generator. Invoke the target method (rescale_to_unit) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void rescale_to_unit(double[] numbers){
    double min_1 = Double.MAX_VALUE;
    double max_1 = Double.MIN_VALUE;
    int i_1 = 0;
    assertTrue(0 < numbers.length); //[1]
    assertTrue(numbers[0] > max_1); //[2]
    max_1 = numbers[0];
    assertFalse(numbers[0] < min_1); //[3]
    i_1 += 1;
    assertTrue(1 < numbers.length); //[4]
    assertFalse(numbers[1] > max_1); //[5]
    assertFalse(numbers[1] < min_1); //[6]
    i_1 += 1;
    assertFalse(2 < numbers.length); //[7]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    double[] numbers = {1.0, 1.0};
    rescale_to_unit(numbers);
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(numbers[0] < min_1) 
Round 1 generation:
```java
public static void main(String args[]) { 
    double[] numbers = {1.0, 0.0}; 
    rescale_to_unit(numbers);
}
```
Error reason: the assertion [3] is not satisfied, assertFalse(numbers[0] < min_1) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.