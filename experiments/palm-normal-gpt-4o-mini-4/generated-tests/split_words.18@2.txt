You are a Java test generator. Invoke the target method (split_words) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static String[] split_words(String txt){
    assertFalse(txt.contains(" ")); //[1]
    assertFalse(txt.contains(",")); //[2]
    int count_1 = 0;
    int i_1 = 0;
    assertTrue(0 < txt.length()); //[3]
    char curr_1 = txt.charAt(0);
    assertFalse(Character.isLowerCase(curr_1) && ((curr_1 - 'a') % 2) == 1); //[4]
    i_1++;
    assertTrue(1 < txt.length()); //[5]
    char curr_2 = txt.charAt(1);
    assertTrue(Character.isLowerCase(curr_2) && ((curr_2 - 'a') % 2) == 1); //[6]
    count_1++;
    i_1++;
    assertFalse(2 < txt.length()); //[7]
    String[] result_1 = { Integer.toString(1) };
    return result_1;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { split_words("A b"); }
```
Error reason: the assertion [1] is not satisfied, assertFalse(txt.contains(" ")) 
Round 1 generation:
```java
public static void main(String args[]) { split_words("A"); }
```
Error reason: the assertion [5] is not satisfied, assertTrue(1 < txt.length()) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.