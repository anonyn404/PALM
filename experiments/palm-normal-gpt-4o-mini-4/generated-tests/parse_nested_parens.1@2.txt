You are a Java test generator. Invoke the target method (parse_nested_parens) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.util.ArrayList;
import java.util.List;
public static List<Integer> parse_nested_parens(String paren_string){
    String[] paren_groups_1 = paren_string.split(" ");
    List<Integer> result_1 = new ArrayList<Integer>();
    String paren_group_1;
    assertFalse(0 < paren_groups_1.length); //[1]
    return result_1;
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { 
    parse_nested_parens(""); 
}
```
Error reason: the assertion [1] is not satisfied, assertFalse(0 < paren_groups_1.length) 
Round 1 generation:
```java
public static void main(String args[]) { 
    parse_nested_parens(null); 
}
```
Error reason: Exception in thread "main" java.lang.NullPointerException: Cannot invoke "String.split(String)" because "<parameter1>" is null
	at PARSE_NESTED_PARENS.parse_nested_parens(parse_nested_parens.1.java:9)
	at PARSE_NESTED_PARENS.main(parse_nested_parens.1.java:18)

** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.