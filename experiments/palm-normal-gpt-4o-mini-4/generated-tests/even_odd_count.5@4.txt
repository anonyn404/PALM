You are a Java test generator. Invoke the target method (even_odd_count) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void even_odd_count(int num){
    int even_count_1 = 0;
    int odd_count_1 = 0;
    char[] c_array_1 = (Math.abs(num) + "").toCharArray();
    char c_1;
    assertTrue(0 < c_array_1.length); //[1]
    c_1 = c_array_1[0];
    int n_1 = c_1 - '0';
    assertFalse(n_1 % 2 == 0); //[2]
    assertFalse(n_1 % 2 == 1); //[3]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
    even_odd_count(-1);
```
Error reason: the assertion [3] is not satisfied, assertFalse(n_1 % 2 == 1) 
Round 1 generation:
```java
    even_odd_count(1);
```
Error reason: the assertion [3] is not satisfied, assertFalse(n_1 % 2 == 1) 
Round 2 generation:
```java
    even_odd_count(2);
```
Error reason: the assertion [2] is not satisfied, assertFalse(n_1 % 2 == 0) 
Round 3 generation:
```java
    even_odd_count(3);
```
Error reason: the assertion [3] is not satisfied, assertFalse(n_1 % 2 == 1) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.