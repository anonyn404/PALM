You are a Java test generator. Invoke the target method (compare_one) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
public static void compare_one(Object a, Object b){
    double temp_a_1 = 0, temp_b_1 = 0;
    assertTrue(a instanceof String); //[1]
    String temp_a_string_1 = a.toString();
    temp_a_string_1 = temp_a_string_1.replace(',', '.');
    temp_a_1 = Double.parseDouble(temp_a_string_1);
    assertTrue(b instanceof String); //[2]
    String temp_b_string_1 = b.toString();
    temp_b_string_1 = temp_b_string_1.replace(',', '.');
    temp_b_1 = Double.parseDouble(temp_b_string_1);
    assertFalse(a instanceof Double); //[3]
    assertFalse(b instanceof Double); //[4]
    assertTrue(a instanceof Integer); //[5]
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) { compare_one("123.45", "678.90"); }
```
Error reason: the assertion [5] is not satisfied, assertTrue(a instanceof Integer) 
Round 1 generation:
```java
public static void main(String args[]) { compare_one("123", "456"); }
```
Error reason: the assertion [5] is not satisfied, assertTrue(a instanceof Integer) 
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.