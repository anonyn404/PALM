You are a Java test generator. Invoke the target method (string_to_md5) with concrete inputs so that all `assertTrue` and `assertFalse` statements pass.
Allow edge cases (e.g. null, empty) if they meet those constraints. Include no printing, error handling, unrelated logic or return‑value checks.

** Input program **
import java.util.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.xml.bind.DatatypeConverter;
public static String string_to_md5(String text) throws NoSuchAlgorithmException{
    assertFalse(text.equals("")); //[1]
    MessageDigest md_1 = MessageDigest.getInstance("MD5");
    md_1.update(text.getBytes());
    byte[] digest_1 = md_1.digest();
    return DatatypeConverter.printHexBinary(digest_1).toLowerCase();
}

** Feedback **
You have previously generated concrete unit tests, but each of them violated some assertions. Please regenerate a valid unit test based on the feedback provided below.
Round 0 generation:
```java
public static void main(String args[]) throws Exception { string_to_md5("a"); }
```
Error reason: Syntax error.
Round 1 generation:
```java
try { 
    string_to_md5("a"); 
} catch (NoSuchAlgorithmException e) { 
    throw new RuntimeException(e); 
}
```
Error reason: Do not include try-catch statements in your generated test.
** Output Format **
If satisfiable, output :
```java
// write you code here
```

Only output the code to replace <hole> in the auxiliary test driver:
public static void main(String args[]) { <hole> }

If no input can satisfy the path condition, output:
UNSAT

Only generate a java unit test or UNSAT without any explanation or comments.