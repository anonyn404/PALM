{
  "get@java.util.ArrayList<java.lang.Integer>+int": {
    "statement": "arr.get(i_1)",
    "name": "get",
    "args": [
      "i_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "arr",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Retrieves the element at the specified position in the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50))",
          "#arg1": "2"
        },
        "output": "30"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(100, 200, 300))",
          "#arg1": "0"
        },
        "output": "100"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 15, 25, 35, 45))",
          "#arg1": "4"
        },
        "output": "45"
      }
    ]
  },
  "toString@java.lang.Integer+java.lang.Integer": {
    "statement": "Integer.toString(arr.get(i_1))",
    "name": "toString",
    "args": [
      "arr.get(i_1)"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "Integer",
    "scope-type": "java.lang.Integer",
    "documentation": "Converts the specified integer to its string representation.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.lang.Integer(123)"
        },
        "output": "\"123\""
      },
      {
        "input": {
          "#scope": "new java.lang.Integer(-5)"
        },
        "output": "\"-5\""
      },
      {
        "input": {
          "#scope": "new java.lang.Integer(0)"
        },
        "output": "\"0\""
      },
      {
        "input": {
          "#scope": "new java.lang.Integer(1000)"
        },
        "output": "\"1000\""
      },
      {
        "input": {
          "#scope": "new java.lang.Integer(-999)"
        },
        "output": "\"-999\""
      }
    ]
  },
  "length@java.lang.String+": {
    "statement": "Integer.toString(arr.get(i_1)).length()",
    "name": "length",
    "args": [],
    "args-type": [],
    "scope": "Integer.toString(arr.get(i_1))",
    "scope-type": "java.lang.String",
    "documentation": "Returns the length of this string.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello\""
        },
        "output": "5"
      },
      {
        "input": {
          "#scope": "\"\""
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "\"Java\""
        },
        "output": "4"
      },
      {
        "input": {
          "#scope": "\"symbolic execution\""
        },
        "output": "18"
      },
      {
        "input": {
          "#scope": "\"1234567890\""
        },
        "output": "10"
      }
    ]
  },
  "substring@java.lang.String+int+int": {
    "statement": "string.substring(0, i_1 + 1)",
    "name": "substring",
    "args": [
      "0",
      "i_1 + 1"
    ],
    "args-type": [
      "int",
      "int"
    ],
    "scope": "string",
    "scope-type": "java.lang.String",
    "documentation": "Extracts a substring from the given string, starting from the specified begin index and extending to the character at index end - 1.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "0",
          "#arg2": "5"
        },
        "output": "\"hello\""
      },
      {
        "input": {
          "#scope": "\"java programming\"",
          "#arg1": "5",
          "#arg2": "16"
        },
        "output": "\"programming\""
      },
      {
        "input": {
          "#scope": "\"substring method\"",
          "#arg1": "3",
          "#arg2": "9"
        },
        "output": "\"string\""
      },
      {
        "input": {
          "#scope": "\"example\"",
          "#arg1": "2",
          "#arg2": "4"
        },
        "output": "\"am\""
      },
      {
        "input": {
          "#scope": "\"test case\"",
          "#arg1": "0",
          "#arg2": "4"
        },
        "output": "\"test\""
      }
    ]
  },
  "add@java.util.List<java.lang.String>+java.lang.String": {
    "statement": "result_1.add(string.substring(0, i_1 + 1))",
    "name": "add",
    "args": [
      "string.substring(0, i_1 + 1)"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "result_1",
    "scope-type": "java.util.List<java.lang.String>",
    "documentation": "Adds the specified string element to the list if it is not already present.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\"))",
          "#arg1": "\"cherry\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\"))",
          "#arg1": "\"banana\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "\"apple\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\"))",
          "#arg1": "\"apple\""
        },
        "output": "false"
      }
    ]
  },
  "split@java.lang.String+java.lang.String": {
    "statement": "s.split(\" \")",
    "name": "split",
    "args": [
      "\" \""
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "s",
    "scope-type": "java.lang.String",
    "documentation": "Splits this string around matches of the given regular expression.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "\" \""
        },
        "output": "new String[]{\"hello\", \"world\"}"
      },
      {
        "input": {
          "#scope": "\"one,two,three\"",
          "#arg1": "\",\""
        },
        "output": "new String[]{\"one\", \"two\", \"three\"}"
      },
      {
        "input": {
          "#scope": "\"apple-banana-cherry\"",
          "#arg1": "\"-\""
        },
        "output": "new String[]{\"apple\", \"banana\", \"cherry\"}"
      },
      {
        "input": {
          "#scope": "\"a:b:c\"",
          "#arg1": "\":\""
        },
        "output": "new String[]{\"a\", \"b\", \"c\"}"
      },
      {
        "input": {
          "#scope": "\"no delimiters\"",
          "#arg1": "\",\""
        },
        "output": "new String[]{\"no delimiters\"}"
      }
    ]
  },
  "toCharArray@java.lang.String+": {
    "statement": "str_1.toCharArray()",
    "name": "toCharArray",
    "args": [],
    "args-type": [],
    "scope": "str_1",
    "scope-type": "java.lang.String",
    "documentation": "Converts this string to a new character array.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello\""
        },
        "output": "new char[]{'h', 'e', 'l', 'l', 'o'}"
      },
      {
        "input": {
          "#scope": "\"world\""
        },
        "output": "new char[]{'w', 'o', 'r', 'l', 'd'}"
      },
      {
        "input": {
          "#scope": "\"\""
        },
        "output": "new char[]{}"
      },
      {
        "input": {
          "#scope": "\"Java\""
        },
        "output": "new char[]{'J', 'a', 'v', 'a'}"
      },
      {
        "input": {
          "#scope": "\"12345\""
        },
        "output": "new char[]{'1', '2', '3', '4', '5'}"
      }
    ]
  },
  "sort@java.util.Arrays+char[]": {
    "statement": "Arrays.sort(chars_1)",
    "name": "sort",
    "args": [
      "chars_1"
    ],
    "args-type": [
      "char[]"
    ],
    "scope": "Arrays",
    "scope-type": "java.util.Arrays",
    "documentation": "Sorts the specified array of characters into ascending order.",
    "input-output": [
      {
        "input": {
          "#arg1": "new char[]{'d', 'c', 'b', 'a'}"
        },
        "output": "new char[]{'a', 'b', 'c', 'd'}"
      },
      {
        "input": {
          "#arg1": "new char[]{'z', 'y', 'x', 'w'}"
        },
        "output": "new char[]{'w', 'x', 'y', 'z'}"
      },
      {
        "input": {
          "#arg1": "new char[]{'a', 'e', 'i', 'o', 'u'}"
        },
        "output": "new char[]{'a', 'e', 'i', 'o', 'u'}"
      },
      {
        "input": {
          "#arg1": "new char[]{'b', 'a', 'd', 'c'}"
        },
        "output": "new char[]{'a', 'b', 'c', 'd'}"
      },
      {
        "input": {
          "#arg1": "new char[]{'a', 'a', 'b', 'b'}"
        },
        "output": "new char[]{'a', 'a', 'b', 'b'}"
      }
    ]
  },
  "iterator@java.util.List<java.lang.Integer>+": {
    "statement": "operations.iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "operations",
    "scope-type": "java.util.List<java.lang.Integer>",
    "documentation": "Returns an iterator over the elements in this list in proper sequence.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))"
        },
        "output": "Arrays.asList(1, 2, 3).iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())"
        },
        "output": "Arrays.asList().iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(42))"
        },
        "output": "Arrays.asList(42).iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(-1, 0, 1))"
        },
        "output": "Arrays.asList(-1, 0, 1).iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 10, 15, 20))"
        },
        "output": "Arrays.asList(5, 10, 15, 20).iterator()"
      }
    ]
  },
  "hasNext@java.util.Iterator<java.lang.Integer>+": {
    "statement": "op_iter_1.hasNext()",
    "name": "hasNext",
    "args": [],
    "args-type": [],
    "scope": "op_iter_1",
    "scope-type": "java.util.Iterator<java.lang.Integer>",
    "documentation": "Checks if the iterator has more elements to iterate over.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3)).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1)).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList()).iterator()"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30)).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(100)).iterator()"
        },
        "output": "true"
      }
    ]
  },
  "next@java.util.Iterator<java.lang.Integer>+": {
    "statement": "op_iter_1.next()",
    "name": "next",
    "args": [],
    "args-type": [],
    "scope": "op_iter_1",
    "scope-type": "java.util.Iterator<java.lang.Integer>",
    "documentation": "Returns the next element in the iteration and advances the iterator.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3)).iterator()"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30)).iterator()"
        },
        "output": "10"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(42)).iterator()"
        },
        "output": "42"
      }
    ]
  },
  "asList@java.util.Arrays+java.lang.String+java.lang.String+java.lang.String+java.lang.String+java.lang.String+java.lang.String+java.lang.String+java.lang.String": {
    "statement": "Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")",
    "name": "asList",
    "args": [
      "\"Mercury\"",
      "\"Venus\"",
      "\"Earth\"",
      "\"Mars\"",
      "\"Jupiter\"",
      "\"Saturn\"",
      "\"Uranus\"",
      "\"Neptune\""
    ],
    "args-type": [
      "java.lang.String",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String"
    ],
    "scope": "Arrays",
    "scope-type": "java.util.Arrays",
    "documentation": "Converts a sequence of strings into a fixed-size list backed by the specified array of strings.",
    "input-output": [
      {
        "input": {
          "#arg1": "\"apple\"",
          "#arg2": "\"banana\"",
          "#arg3": "\"cherry\"",
          "#arg4": "\"date\"",
          "#arg5": "\"elderberry\"",
          "#arg6": "\"fig\"",
          "#arg7": "\"grape\"",
          "#arg8": "\"honeydew\""
        },
        "output": "Arrays.asList(\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\")"
      },
      {
        "input": {
          "#arg1": "\"one\"",
          "#arg2": "\"two\"",
          "#arg3": "\"three\"",
          "#arg4": "\"four\"",
          "#arg5": "\"five\"",
          "#arg6": "\"six\"",
          "#arg7": "\"seven\"",
          "#arg8": "\"eight\""
        },
        "output": "Arrays.asList(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\")"
      },
      {
        "input": {
          "#arg1": "\"red\"",
          "#arg2": "\"orange\"",
          "#arg3": "\"yellow\"",
          "#arg4": "\"green\"",
          "#arg5": "\"blue\"",
          "#arg6": "\"indigo\"",
          "#arg7": "\"violet\"",
          "#arg8": "\"\""
        },
        "output": "Arrays.asList(\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\", \"\")"
      }
    ]
  },
  "contains@java.util.ArrayList<java.lang.String>+java.lang.String": {
    "statement": "planet_names_1.contains(planet1)",
    "name": "contains",
    "args": [
      "planet1"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "planet_names_1",
    "scope-type": "java.util.ArrayList<java.lang.String>",
    "documentation": "Checks if the ArrayList contains the specified string.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))",
          "#arg1": "\"banana\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))",
          "#arg1": "\"grape\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())",
          "#arg1": "\"apple\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"apple\"))",
          "#arg1": "\"apple\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))",
          "#arg1": "\"\""
        },
        "output": "false"
      }
    ]
  },
  "indexOf@java.util.ArrayList<java.lang.String>+java.lang.String": {
    "statement": "planet_names_1.indexOf(planet1)",
    "name": "indexOf",
    "args": [
      "planet1"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "planet_names_1",
    "scope-type": "java.util.ArrayList<java.lang.String>",
    "documentation": "Finds the index of the first occurrence of the specified string in the list, or -1 if the list does not contain the string.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))",
          "#arg1": "\"banana\""
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))",
          "#arg1": "\"grape\""
        },
        "output": "-1"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"apple\", \"cherry\"))",
          "#arg1": "\"apple\""
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())",
          "#arg1": "\"apple\""
        },
        "output": "-1"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"apple\", \"banana\"))",
          "#arg1": "\"banana\""
        },
        "output": "1"
      }
    ]
  },
  "get@java.util.ArrayList<java.lang.String>+int": {
    "statement": "planet_names_1.get(i_1)",
    "name": "get",
    "args": [
      "i_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "planet_names_1",
    "scope-type": "java.util.ArrayList<java.lang.String>",
    "documentation": "Retrieves the element at the specified position in the ArrayList.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))",
          "#arg1": "0"
        },
        "output": "\"apple\""
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))",
          "#arg1": "1"
        },
        "output": "\"banana\""
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))",
          "#arg1": "2"
        },
        "output": "\"cherry\""
      }
    ]
  },
  "add@java.util.ArrayList<java.lang.String>+java.lang.String": {
    "statement": "result_1.add(planet_names_1.get(i_1))",
    "name": "add",
    "args": [
      "planet_names_1.get(i_1)"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "result_1",
    "scope-type": "java.util.ArrayList<java.lang.String>",
    "documentation": "Adds the specified string element to the end of the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "\"hello\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\"))",
          "#arg1": "\"cherry\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "\"\""
        },
        "output": "true"
      }
    ]
  },
  "put@java.util.Map<java.lang.Integer, java.lang.String>+int+java.lang.String": {
    "statement": "digit_map_1.put(1, \"One\")",
    "name": "put",
    "args": [
      "1",
      "\"One\""
    ],
    "args-type": [
      "int",
      "java.lang.String"
    ],
    "scope": "digit_map_1",
    "scope-type": "java.util.Map<java.lang.Integer, java.lang.String>",
    "documentation": "Associates the specified value with the specified key in the map. If the map previously contained a mapping for the key, the old value is replaced.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Integer, String>()",
          "#arg1": "1",
          "#arg2": "\"Hello\""
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, String>()",
          "#arg1": "2",
          "#arg2": "\"World\""
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, String>() {{ put(1, \"Initial\"); }}",
          "#arg1": "1",
          "#arg2": "\"Updated\""
        },
        "output": "\"Initial\""
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, String>() {{ put(3, \"Value\"); }}",
          "#arg1": "4",
          "#arg2": "\"New Entry\""
        },
        "output": "null"
      }
    ]
  },
  "reverseOrder@java.util.Collections+": {
    "statement": "Collections.reverseOrder()",
    "name": "reverseOrder",
    "args": [],
    "args-type": [],
    "scope": "Collections",
    "scope-type": "java.util.Collections",
    "documentation": "Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface.",
    "input-output": [
      {
        "input": {},
        "output": "java.util.Collections.reverseOrder()"
      }
    ]
  },
  "sort@java.util.Collections+java.util.ArrayList<java.lang.Integer>+java.util.Comparator<T>": {
    "statement": "Collections.sort(a, Collections.reverseOrder())",
    "name": "sort",
    "args": [
      "a",
      "Collections.reverseOrder()"
    ],
    "args-type": [
      "java.util.ArrayList<java.lang.Integer>",
      "java.util.Comparator<T>"
    ],
    "scope": "Collections",
    "scope-type": "java.util.Collections",
    "documentation": "Sorts the specified list according to the order induced by the specified comparator.",
    "input-output": [
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(3, 1, 2))",
          "#arg2": "Comparator.naturalOrder()"
        },
        "output": "new ArrayList<>(Arrays.asList(1, 2, 3))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(3, 1, 2))",
          "#arg2": "Comparator.reverseOrder()"
        },
        "output": "new ArrayList<>(Arrays.asList(3, 2, 1))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(5, 4, 3, 2, 1))",
          "#arg2": "Comparator.naturalOrder()"
        },
        "output": "new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList())",
          "#arg2": "Comparator.naturalOrder()"
        },
        "output": "new ArrayList<>(Arrays.asList())"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg2": "Comparator.reverseOrder()"
        },
        "output": "new ArrayList<>(Arrays.asList(3, 2, 1))"
      }
    ]
  },
  "iterator@java.util.ArrayList<java.lang.Integer>+": {
    "statement": "a.iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "a",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Returns an iterator over the elements in the specified ArrayList of Integers.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))"
        },
        "output": "Arrays.asList(1, 2, 3).iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()"
        },
        "output": "Collections.emptyIterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40))"
        },
        "output": "Arrays.asList(10, 20, 30, 40).iterator()"
      }
    ]
  },
  "get@java.util.Map<java.lang.Integer, java.lang.String>+int": {
    "statement": "digit_map_1.get(num_1)",
    "name": "get",
    "args": [
      "num_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "digit_map_1",
    "scope-type": "java.util.Map<java.lang.Integer, java.lang.String>",
    "documentation": "Retrieves the value associated with the specified key from the map. If the key is not present, returns null.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Integer, String>() {{ put(1, \"one\"); put(2, \"two\"); }}",
          "#arg1": "1"
        },
        "output": "\"one\""
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, String>() {{ put(1, \"one\"); put(2, \"two\"); }}",
          "#arg1": "2"
        },
        "output": "\"two\""
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, String>() {{ put(1, \"one\"); put(2, \"two\"); }}",
          "#arg1": "3"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, String>()",
          "#arg1": "1"
        },
        "output": "null"
      }
    ]
  },
  "size@java.util.HashMap<java.lang.Object, java.lang.Object>+": {
    "statement": "dict.size()",
    "name": "size",
    "args": [],
    "args-type": [],
    "scope": "dict",
    "scope-type": "java.util.HashMap<java.lang.Object, java.lang.Object>",
    "documentation": "Returns the number of key-value mappings in the HashMap.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<>()"
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new HashMap<>() {{ put(\"key1\", \"value1\"); }}"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "new HashMap<>() {{ put(\"key1\", \"value1\"); put(\"key2\", \"value2\"); }}"
        },
        "output": "2"
      },
      {
        "input": {
          "#scope": "new HashMap<>() {{ put(1, \"one\"); put(2, \"two\"); put(3, \"three\"); }}"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new HashMap<>() {{ put(\"key1\", \"value1\"); put(\"key2\", null); }}"
        },
        "output": "2"
      }
    ]
  },
  "keySet@java.util.HashMap<java.lang.Object, java.lang.Object>+": {
    "statement": "dict.keySet()",
    "name": "keySet",
    "args": [],
    "args-type": [],
    "scope": "dict",
    "scope-type": "java.util.HashMap<java.lang.Object, java.lang.Object>",
    "documentation": "Returns a Set view of the keys contained in the HashMap.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<>()"
        },
        "output": "new HashSet<>()"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(1, \"one\", 2, \"two\", 3, \"three\"))"
        },
        "output": "new HashSet<>(Arrays.asList(1, 2, 3))"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(\"a\", 100, \"b\", 200))"
        },
        "output": "new HashSet<>(Arrays.asList(\"a\", \"b\"))"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of())"
        },
        "output": "new HashSet<>()"
      }
    ]
  },
  "iterator@java.util.Set<java.lang.Object>+": {
    "statement": "dict.keySet().iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "dict.keySet()",
    "scope-type": "java.util.Set<java.lang.Object>",
    "documentation": "Returns an iterator over the elements in this set.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))"
        },
        "output": "Arrays.asList(\"apple\", \"banana\", \"cherry\").iterator()"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList(1, 2, 3))"
        },
        "output": "Arrays.asList(1, 2, 3).iterator()"
      },
      {
        "input": {
          "#scope": "new HashSet<>()"
        },
        "output": "Collections.emptyIterator()"
      }
    ]
  },
  "hasNext@java.util.Iterator<java.lang.Object>+": {
    "statement": "key_iter_1.hasNext()",
    "name": "hasNext",
    "args": [],
    "args-type": [],
    "scope": "key_iter_1",
    "scope-type": "java.util.Iterator<java.lang.Object>",
    "documentation": "Checks if the iterator has more elements to iterate over.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3)).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>().iterator()"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"a\", \"b\")).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"a\", \"b\")).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"a\", \"b\")).iterator()"
        },
        "output": "true"
      }
    ]
  },
  "equals@java.lang.String+java.lang.String": {
    "statement": "state_1.equals(\"upper\")",
    "name": "equals",
    "args": [
      "\"upper\""
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "state_1",
    "scope-type": "java.lang.String",
    "documentation": "Compares the specified string to the current string to determine if they are equal.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello\"",
          "#arg1": "\"hello\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"hello\"",
          "#arg1": "\"world\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"\"",
          "#arg1": "\"\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"java\"",
          "#arg1": "\"Java\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"test\"",
          "#arg1": "null"
        },
        "output": "false"
      }
    ]
  },
  "next@java.util.Iterator<java.lang.Object>+": {
    "statement": "key_iter_1.next()",
    "name": "next",
    "args": [],
    "args-type": [],
    "scope": "key_iter_1",
    "scope-type": "java.util.Iterator<java.lang.Object>",
    "documentation": "Returns the next element in the iteration and advances the iterator.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.ArrayList<>(java.util.Arrays.asList(\"apple\", \"banana\", \"cherry\")).iterator()"
        },
        "output": "\"apple\""
      },
      {
        "input": {
          "#scope": "new java.util.ArrayList<>(java.util.Arrays.asList(1, 2, 3, 4)).iterator()"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "java.util.Arrays.asList(true, false, true).iterator()"
        },
        "output": "true"
      }
    ]
  },
  "toUpperCase@java.lang.String+": {
    "statement": "str_key_1.toUpperCase()",
    "name": "toUpperCase",
    "args": [],
    "args-type": [],
    "scope": "str_key_1",
    "scope-type": "java.lang.String",
    "documentation": "Converts all of the characters in this String to uppercase using the rules of the default locale.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello world\""
        },
        "output": "\"HELLO WORLD\""
      },
      {
        "input": {
          "#scope": "\"Java\""
        },
        "output": "\"JAVA\""
      },
      {
        "input": {
          "#scope": "\"123abc\""
        },
        "output": "\"123ABC\""
      },
      {
        "input": {
          "#scope": "\"Test123!@#\""
        },
        "output": "\"TEST123!@#\""
      },
      {
        "input": {
          "#scope": "\"\""
        },
        "output": "\"\""
      }
    ]
  },
  "toLowerCase@java.lang.String+": {
    "statement": "str_key_1.toLowerCase()",
    "name": "toLowerCase",
    "args": [],
    "args-type": [],
    "scope": "str_key_1",
    "scope-type": "java.lang.String",
    "documentation": "Converts all of the characters in this String to lower case using the default locale.",
    "input-output": [
      {
        "input": {
          "#scope": "\"HELLO WORLD\""
        },
        "output": "\"hello world\""
      },
      {
        "input": {
          "#scope": "\"Java Programming\""
        },
        "output": "\"java programming\""
      },
      {
        "input": {
          "#scope": "\"123 ABC xyz\""
        },
        "output": "\"123 abc xyz\""
      },
      {
        "input": {
          "#scope": "\"MiXeD CaSe\""
        },
        "output": "\"mixed case\""
      },
      {
        "input": {
          "#scope": "\"already lowercase\""
        },
        "output": "\"already lowercase\""
      }
    ]
  },
  "charAt@java.lang.String+int": {
    "statement": "txt.charAt(txt.length() - 1)",
    "name": "charAt",
    "args": [
      "txt.length() - 1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "txt",
    "scope-type": "java.lang.String",
    "documentation": "Returns the character at the specified index from the given string.",
    "input-output": [
      {
        "input": {
          "#scope": "\"Hello, World!\"",
          "#arg1": "7"
        },
        "output": "'W'"
      },
      {
        "input": {
          "#scope": "\"Java\"",
          "#arg1": "0"
        },
        "output": "'J'"
      },
      {
        "input": {
          "#scope": "\"Test\"",
          "#arg1": "3"
        },
        "output": "'t'"
      },
      {
        "input": {
          "#scope": "\"Symbolic Execution\"",
          "#arg1": "8"
        },
        "output": "'E'"
      },
      {
        "input": {
          "#scope": "\"Functional Programming\"",
          "#arg1": "10"
        },
        "output": "'P'"
      }
    ]
  },
  "toLowerCase@java.lang.Character+char": {
    "statement": "Character.toLowerCase(last_1.charAt(0))",
    "name": "toLowerCase",
    "args": [
      "last_1.charAt(0)"
    ],
    "args-type": [
      "char"
    ],
    "scope": "Character",
    "scope-type": "java.lang.Character",
    "documentation": "Converts the specified character to its lowercase equivalent if it is an uppercase letter; otherwise, it returns the character unchanged.",
    "input-output": [
      {
        "input": {
          "#arg1": "'A'"
        },
        "output": "'a'"
      },
      {
        "input": {
          "#arg1": "'a'"
        },
        "output": "'a'"
      },
      {
        "input": {
          "#arg1": "'Z'"
        },
        "output": "'z'"
      },
      {
        "input": {
          "#arg1": "'z'"
        },
        "output": "'z'"
      },
      {
        "input": {
          "#arg1": "'1'"
        },
        "output": "'1'"
      },
      {
        "input": {
          "#arg1": "'!'"
        },
        "output": "'!'"
      },
      {
        "input": {
          "#arg1": "' '"
        },
        "output": "' '"
      }
    ]
  },
  "toString@java.lang.StringBuilder+": {
    "statement": "sb_1.toString()",
    "name": "toString",
    "args": [],
    "args-type": [],
    "scope": "sb_1",
    "scope-type": "java.lang.StringBuilder",
    "documentation": "Converts the contents of the StringBuilder to a string representation.",
    "input-output": [
      {
        "input": {
          "#scope": "new StringBuilder(\"Hello\")"
        },
        "output": "\"Hello\""
      },
      {
        "input": {
          "#scope": "new StringBuilder(\"\")"
        },
        "output": "\"\""
      },
      {
        "input": {
          "#scope": "new StringBuilder(\"Java\")"
        },
        "output": "\"Java\""
      },
      {
        "input": {
          "#scope": "new StringBuilder(\"12345\")"
        },
        "output": "\"12345\""
      },
      {
        "input": {
          "#scope": "new StringBuilder(\"A long sentence with multiple words.\")"
        },
        "output": "\"A long sentence with multiple words.\""
      }
    ]
  },
  "append@java.lang.StringBuilder+char": {
    "statement": "sb_1.append(s_1.charAt(i_1))",
    "name": "append",
    "args": [
      "s_1.charAt(i_1)"
    ],
    "args-type": [
      "char"
    ],
    "scope": "sb_1",
    "scope-type": "java.lang.StringBuilder",
    "documentation": "Appends the specified character to the end of the StringBuilder, modifying its contents.",
    "input-output": [
      {
        "input": {
          "#scope": "new StringBuilder(\"Hello\")",
          "#arg1": "'!'"
        },
        "output": "new StringBuilder(\"Hello!\")"
      },
      {
        "input": {
          "#scope": "new StringBuilder()",
          "#arg1": "'A'"
        },
        "output": "new StringBuilder(\"A\")"
      },
      {
        "input": {
          "#scope": "new StringBuilder(\"Test\")",
          "#arg1": "'1'"
        },
        "output": "new StringBuilder(\"Test1\")"
      },
      {
        "input": {
          "#scope": "new StringBuilder(\"Java\")",
          "#arg1": "' '"
        },
        "output": "new StringBuilder(\"Java \")"
      },
      {
        "input": {
          "#scope": "new StringBuilder(\"123\")",
          "#arg1": "'4'"
        },
        "output": "new StringBuilder(\"1234\")"
      }
    ]
  },
  "substring@java.lang.String+int": {
    "statement": "s_1.substring(s_1.length() - shift)",
    "name": "substring",
    "args": [
      "s_1.length() - shift"
    ],
    "args-type": [
      "int"
    ],
    "scope": "s_1",
    "scope-type": "java.lang.String",
    "documentation": "Returns a new string that is a substring of this string, starting from the specified index to the end of the string.",
    "input-output": [
      {
        "input": {
          "#scope": "\"Hello, World!\"",
          "#arg1": "7"
        },
        "output": "\"World!\""
      },
      {
        "input": {
          "#scope": "\"Java Programming\"",
          "#arg1": "5"
        },
        "output": "\"Programming\""
      },
      {
        "input": {
          "#scope": "\"Symbolic Execution\"",
          "#arg1": "0"
        },
        "output": "\"Symbolic Execution\""
      },
      {
        "input": {
          "#scope": "\"Test Case\"",
          "#arg1": "9"
        },
        "output": "\"e\""
      },
      {
        "input": {
          "#scope": "\"Substring Method\"",
          "#arg1": "17"
        },
        "output": "\"\""
      }
    ]
  },
  "indexOf@java.lang.String+char": {
    "statement": "value.indexOf('.')",
    "name": "indexOf",
    "args": [
      "'.'"
    ],
    "args-type": [
      "char"
    ],
    "scope": "value",
    "scope-type": "java.lang.String",
    "documentation": "Returns the index within this string of the first occurrence of the specified character, or -1 if the character does not occur.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello\"",
          "#arg1": "'e'"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "\"world\"",
          "#arg1": "'r'"
        },
        "output": "2"
      },
      {
        "input": {
          "#scope": "\"example\"",
          "#arg1": "'x'"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "\"test\"",
          "#arg1": "'z'"
        },
        "output": "-1"
      },
      {
        "input": {
          "#scope": "\"character\"",
          "#arg1": "'c'"
        },
        "output": "0"
      }
    ]
  },
  "parseDouble@java.lang.Double+java.lang.String": {
    "statement": "Double.parseDouble(value)",
    "name": "parseDouble",
    "args": [
      "value"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "Double",
    "scope-type": "java.lang.Double",
    "documentation": "Parses the specified string as a double, returning the double value represented by the string.",
    "input-output": [
      {
        "input": {
          "#arg1": "\"3.14\""
        },
        "output": "3.14"
      },
      {
        "input": {
          "#arg1": "\"-2.718\""
        },
        "output": "-2.718"
      },
      {
        "input": {
          "#arg1": "\"0.0\""
        },
        "output": "0.0"
      },
      {
        "input": {
          "#arg1": "\"1.0e10\""
        },
        "output": "1.0E10"
      },
      {
        "input": {
          "#arg1": "\"-1.0e-10\""
        },
        "output": "-1.0E-10"
      }
    ]
  },
  "floor@java.lang.Math+double": {
    "statement": "Math.floor(num_1)",
    "name": "floor",
    "args": [
      "num_1"
    ],
    "args-type": [
      "double"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer.",
    "input-output": [
      {
        "input": {
          "#arg1": "3.7"
        },
        "output": "3.0"
      },
      {
        "input": {
          "#arg1": "-2.3"
        },
        "output": "-3.0"
      },
      {
        "input": {
          "#arg1": "0.0"
        },
        "output": "0.0"
      },
      {
        "input": {
          "#arg1": "-0.0"
        },
        "output": "-0.0"
      },
      {
        "input": {
          "#arg1": "5.9999"
        },
        "output": "5.0"
      },
      {
        "input": {
          "#arg1": "100.0"
        },
        "output": "100.0"
      }
    ]
  },
  "ceil@java.lang.Math+double": {
    "statement": "Math.ceil(num_1)",
    "name": "ceil",
    "args": [
      "num_1"
    ],
    "args-type": [
      "double"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the smallest integer value that is greater than or equal to the specified double value.",
    "input-output": [
      {
        "input": {
          "#arg1": "4.2"
        },
        "output": "5.0"
      },
      {
        "input": {
          "#arg1": "7.0"
        },
        "output": "7.0"
      },
      {
        "input": {
          "#arg1": "-3.8"
        },
        "output": "-3.0"
      },
      {
        "input": {
          "#arg1": "0.0"
        },
        "output": "0.0"
      },
      {
        "input": {
          "#arg1": "-0.1"
        },
        "output": "0.0"
      }
    ]
  },
  "round@java.lang.Math+double": {
    "statement": "Math.round(num_1)",
    "name": "round",
    "args": [
      "num_1"
    ],
    "args-type": [
      "double"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Rounds the specified double value to the nearest integer. If the fractional part is 0.5 or greater, the argument is rounded up to the next integer. If the fractional part is less than 0.5, the argument is rounded down.",
    "input-output": [
      {
        "input": {
          "#arg1": "4.5"
        },
        "output": "5"
      },
      {
        "input": {
          "#arg1": "4.4"
        },
        "output": "4"
      },
      {
        "input": {
          "#arg1": "-4.5"
        },
        "output": "-4"
      },
      {
        "input": {
          "#arg1": "-4.6"
        },
        "output": "-5"
      },
      {
        "input": {
          "#arg1": "0.0"
        },
        "output": "0"
      },
      {
        "input": {
          "#arg1": "2.3"
        },
        "output": "2"
      },
      {
        "input": {
          "#arg1": "2.7"
        },
        "output": "3"
      }
    ]
  },
  "size@java.util.HashSet<java.lang.Integer>+": {
    "statement": "common_1.size()",
    "name": "size",
    "args": [],
    "args-type": [],
    "scope": "common_1",
    "scope-type": "java.util.HashSet<java.lang.Integer>",
    "documentation": "Returns the number of elements in the HashSet.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>()"
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>(java.util.Arrays.asList(1, 2, 3))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>(java.util.Arrays.asList(1, 2, 2, 3, 3, 3))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>(java.util.Arrays.asList(-1, 0, 1))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>(java.util.Arrays.asList())"
        },
        "output": "0"
      }
    ]
  },
  "iterator@java.util.HashSet<java.lang.Integer>+": {
    "statement": "common_1.iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "common_1",
    "scope-type": "java.util.HashSet<java.lang.Integer>",
    "documentation": "Returns an iterator over the elements in this HashSet in no particular order.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList(1, 2, 3))"
        },
        "output": "java.util.Arrays.asList(1, 2, 3).iterator()"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList(5, 10, 15))"
        },
        "output": "java.util.Arrays.asList(5, 10, 15).iterator()"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList())"
        },
        "output": "java.util.Arrays.asList().iterator()"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList(-1, -2, -3))"
        },
        "output": "java.util.Arrays.asList(-1, -2, -3).iterator()"
      }
    ]
  },
  "sort@java.util.Arrays+int[]": {
    "statement": "Arrays.sort(result_1)",
    "name": "sort",
    "args": [
      "result_1"
    ],
    "args-type": [
      "int[]"
    ],
    "scope": "Arrays",
    "scope-type": "java.util.Arrays",
    "documentation": "Sorts the specified array of integers into ascending numerical order.",
    "input-output": [
      {
        "input": {
          "#arg1": "new int[]{5, 3, 8, 1, 2}"
        },
        "output": "new int[]{1, 2, 3, 5, 8}"
      },
      {
        "input": {
          "#arg1": "new int[]{10, -1, 0, 5, 3}"
        },
        "output": "new int[]{-1, 0, 3, 5, 10}"
      },
      {
        "input": {
          "#arg1": "new int[]{1, 2, 3, 4, 5}"
        },
        "output": "new int[]{1, 2, 3, 4, 5}"
      },
      {
        "input": {
          "#arg1": "new int[]{5, 4, 3, 2, 1}"
        },
        "output": "new int[]{1, 2, 3, 4, 5}"
      },
      {
        "input": {
          "#arg1": "new int[]{42}"
        },
        "output": "new int[]{42}"
      }
    ]
  },
  "add@java.util.HashSet<java.lang.Integer>+int": {
    "statement": "common_1.add(l1[i_1])",
    "name": "add",
    "args": [
      "l1[i_1]"
    ],
    "args-type": [
      "int"
    ],
    "scope": "common_1",
    "scope-type": "java.util.HashSet<java.lang.Integer>",
    "documentation": "Adds the specified integer element to the HashSet if it is not already present.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>()",
          "#arg1": "5"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>(java.util.Arrays.asList(1, 2, 3))",
          "#arg1": "4"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>(java.util.Arrays.asList(1, 2, 3))",
          "#arg1": "2"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>()",
          "#arg1": "1"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Integer>(java.util.Arrays.asList(1, 1, 1))",
          "#arg1": "1"
        },
        "output": "false"
      }
    ]
  },
  "abs@java.lang.Math+int": {
    "statement": "Math.abs(game[i_1] - guess[i_1])",
    "name": "abs",
    "args": [
      "game[i_1] - guess[i_1]"
    ],
    "args-type": [
      "int"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the absolute value of the specified integer.",
    "input-output": [
      {
        "input": {
          "#arg1": "-10"
        },
        "output": "10"
      },
      {
        "input": {
          "#arg1": "0"
        },
        "output": "0"
      },
      {
        "input": {
          "#arg1": "15"
        },
        "output": "15"
      },
      {
        "input": {
          "#arg1": "-123456"
        },
        "output": "123456"
      },
      {
        "input": {
          "#arg1": "2147483647"
        },
        "output": "2147483647"
      }
    ]
  },
  "replace@java.lang.String+char+char": {
    "statement": "temp_a_string_1.replace(',', '.')",
    "name": "replace",
    "args": [
      "','",
      "'.'"
    ],
    "args-type": [
      "char",
      "char"
    ],
    "scope": "temp_a_string_1",
    "scope-type": "java.lang.String",
    "documentation": "Replaces each occurrence of the specified character in this string with the specified replacement character.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "'o'",
          "#arg2": "'a'"
        },
        "output": "\"hella warld\""
      },
      {
        "input": {
          "#scope": "\"banana\"",
          "#arg1": "'a'",
          "#arg2": "'o'"
        },
        "output": "\"bonono\""
      },
      {
        "input": {
          "#scope": "\"aaaa\"",
          "#arg1": "'a'",
          "#arg2": "'b'"
        },
        "output": "\"bbbb\""
      },
      {
        "input": {
          "#scope": "\"abracadabra\"",
          "#arg1": "'a'",
          "#arg2": "'x'"
        },
        "output": "\"xbrxcxdxbrx\""
      },
      {
        "input": {
          "#scope": "\"test\"",
          "#arg1": "'t'",
          "#arg2": "'T'"
        },
        "output": "\"TesT\""
      }
    ]
  },
  "doubleValue@java.lang.Integer+": {
    "statement": "((Integer) a).doubleValue()",
    "name": "doubleValue",
    "args": [],
    "args-type": [],
    "scope": "((Integer) a)",
    "scope-type": "java.lang.Integer",
    "documentation": "Doubles the value of the integer instance.",
    "input-output": [
      {
        "input": {
          "#scope": "new Integer(5)"
        },
        "output": "10"
      },
      {
        "input": {
          "#scope": "new Integer(0)"
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new Integer(-3)"
        },
        "output": "-6"
      },
      {
        "input": {
          "#scope": "new Integer(2147483647)"
        },
        "output": "4294967294"
      },
      {
        "input": {
          "#scope": "new Integer(-2147483648)"
        },
        "output": "-4294967296"
      }
    ]
  },
  "toString@java.lang.Object+": {
    "statement": "a.toString()",
    "name": "toString",
    "args": [],
    "args-type": [],
    "scope": "a",
    "scope-type": "java.lang.Object",
    "documentation": "Returns a string representation of the object. The default implementation returns a string consisting of the class name followed by the object's hashcode.",
    "input-output": [
      {
        "input": {
          "#scope": "new Object()"
        },
        "output": "\"java.lang.Object@\" + Integer.toHexString(System.identityHashCode(new Object()))"
      },
      {
        "input": {
          "#scope": "new String(\"Hello\")"
        },
        "output": "\"Hello\""
      },
      {
        "input": {
          "#scope": "new ArrayList<>()"
        },
        "output": "\"[]\""
      }
    ]
  },
  "size@java.util.HashSet<java.lang.Character>+": {
    "statement": "distinct_1.size()",
    "name": "size",
    "args": [],
    "args-type": [],
    "scope": "distinct_1",
    "scope-type": "java.util.HashSet<java.lang.Character>",
    "documentation": "Returns the number of elements in the HashSet.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('a', 'b', 'c'))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new HashSet<>()"
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('x'))"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('a', 'b', 'a', 'c'))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('a', 'b', 'c', 'd', 'e'))"
        },
        "output": "5"
      }
    ]
  },
  "contains@java.util.HashSet<java.lang.Character>+char": {
    "statement": "distinct_1.contains(Character.toLowerCase(c_1))",
    "name": "contains",
    "args": [
      "Character.toLowerCase(c_1)"
    ],
    "args-type": [
      "char"
    ],
    "scope": "distinct_1",
    "scope-type": "java.util.HashSet<java.lang.Character>",
    "documentation": "Checks if the specified character is present in the HashSet.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList('a', 'b', 'c'))",
          "#arg1": "'a'"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList('a', 'b', 'c'))",
          "#arg1": "'d'"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList('x', 'y', 'z'))",
          "#arg1": "'y'"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList('x', 'y', 'z'))",
          "#arg1": "'a'"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>()",
          "#arg1": "'a'"
        },
        "output": "false"
      }
    ]
  },
  "add@java.util.HashSet<java.lang.Character>+char": {
    "statement": "distinct_1.add(Character.toLowerCase(c_1))",
    "name": "add",
    "args": [
      "Character.toLowerCase(c_1)"
    ],
    "args-type": [
      "char"
    ],
    "scope": "distinct_1",
    "scope-type": "java.util.HashSet<java.lang.Character>",
    "documentation": "Adds a character to the HashSet if it is not already present. Returns true if the HashSet did not already contain the specified character.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Character>()",
          "#arg1": "'a'"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Character>(java.util.Arrays.asList('a', 'b', 'c'))",
          "#arg1": "'d'"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Character>(java.util.Arrays.asList('a', 'b', 'c'))",
          "#arg1": "'b'"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Character>()",
          "#arg1": "'z'"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<java.lang.Character>(java.util.Arrays.asList('x', 'y', 'z'))",
          "#arg1": "'x'"
        },
        "output": "false"
      }
    ]
  },
  "toString@java.lang.Integer+int": {
    "statement": "Integer.toString(num_1)",
    "name": "toString",
    "args": [
      "num_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "Integer",
    "scope-type": "java.lang.Integer",
    "documentation": "Converts the specified integer to its string representation.",
    "input-output": [
      {
        "input": {
          "#arg1": "123"
        },
        "output": "\"123\""
      },
      {
        "input": {
          "#arg1": "-5"
        },
        "output": "\"-5\""
      },
      {
        "input": {
          "#arg1": "0"
        },
        "output": "\"0\""
      },
      {
        "input": {
          "#arg1": "2147483647"
        },
        "output": "\"2147483647\""
      },
      {
        "input": {
          "#arg1": "-2147483648"
        },
        "output": "\"-2147483648\""
      }
    ]
  },
  "add@java.util.List<java.lang.Integer>+int": {
    "statement": "primes_1.add(i_1)",
    "name": "add",
    "args": [
      "i_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "primes_1",
    "scope-type": "java.util.List<java.lang.Integer>",
    "documentation": "Adds the specified integer to the end of the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg1": "4"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "10"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 6, 7))",
          "#arg1": "5"
        },
        "output": "true"
      }
    ]
  },
  "toBinaryString@java.lang.Integer+int": {
    "statement": "Integer.toBinaryString(decimal)",
    "name": "toBinaryString",
    "args": [
      "decimal"
    ],
    "args-type": [
      "int"
    ],
    "scope": "Integer",
    "scope-type": "java.lang.Integer",
    "documentation": "Converts the specified integer to its binary string representation.",
    "input-output": [
      {
        "input": {
          "#arg1": "5"
        },
        "output": "\"101\""
      },
      {
        "input": {
          "#arg1": "0"
        },
        "output": "\"0\""
      },
      {
        "input": {
          "#arg1": "-1"
        },
        "output": "\"11111111111111111111111111111111\""
      },
      {
        "input": {
          "#arg1": "10"
        },
        "output": "\"1010\""
      },
      {
        "input": {
          "#arg1": "1024"
        },
        "output": "\"10000000000\""
      }
    ]
  },
  "size@java.util.List<java.lang.Integer>+": {
    "statement": "xs.size()",
    "name": "size",
    "args": [],
    "args-type": [],
    "scope": "xs",
    "scope-type": "java.util.List<java.lang.Integer>",
    "documentation": "Returns the number of elements in the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()"
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50))"
        },
        "output": "5"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(-1, 0, 1))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(42))"
        },
        "output": "1"
      }
    ]
  },
  "get@java.util.List<java.lang.Integer>+int": {
    "statement": "xs.get(i_1)",
    "name": "get",
    "args": [
      "i_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "xs",
    "scope-type": "java.util.List<java.lang.Integer>",
    "documentation": "Retrieves the element at the specified position in the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40))",
          "#arg1": "2"
        },
        "output": "30"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 15, 25))",
          "#arg1": "0"
        },
        "output": "5"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(100, 200, 300, 400, 500))",
          "#arg1": "4"
        },
        "output": "500"
      }
    ]
  },
  "add@java.util.List<java.lang.Integer>+java.lang.Integer": {
    "statement": "result_1.add(i_1 * xs.get(i_1))",
    "name": "add",
    "args": [
      "i_1 * xs.get(i_1)"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "result_1",
    "scope-type": "java.util.List<java.lang.Integer>",
    "documentation": "Adds the specified integer to the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg1": "4"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "10"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 6, 7))",
          "#arg1": "5"
        },
        "output": "true"
      }
    ]
  },
  "doubleValue@java.lang.Double+": {
    "statement": "d_1.doubleValue()",
    "name": "doubleValue",
    "args": [],
    "args-type": [],
    "scope": "d_1",
    "scope-type": "java.lang.Double",
    "documentation": "Returns the double value of this Double object.",
    "input-output": [
      {
        "input": {
          "#scope": "new Double(5.0)"
        },
        "output": "5.0"
      },
      {
        "input": {
          "#scope": "new Double(-3.14)"
        },
        "output": "-3.14"
      },
      {
        "input": {
          "#scope": "new Double(0.0)"
        },
        "output": "0.0"
      },
      {
        "input": {
          "#scope": "new Double(123456789.987654321)"
        },
        "output": "123456789.987654321"
      },
      {
        "input": {
          "#scope": "new Double(-0.0001)"
        },
        "output": "-0.0001"
      }
    ]
  },
  "isUpperCase@java.lang.Character+char": {
    "statement": "Character.isUpperCase(c_1)",
    "name": "isUpperCase",
    "args": [
      "c_1"
    ],
    "args-type": [
      "char"
    ],
    "scope": "Character",
    "scope-type": "java.lang.Character",
    "documentation": "Determines if the specified character is an uppercase letter.",
    "input-output": [
      {
        "input": {
          "#arg1": "'A'"
        },
        "output": "true"
      },
      {
        "input": {
          "#arg1": "'a'"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "'Z'"
        },
        "output": "true"
      },
      {
        "input": {
          "#arg1": "'z'"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "'1'"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "'!'"
        },
        "output": "false"
      }
    ]
  },
  "isLowerCase@java.lang.Character+char": {
    "statement": "Character.isLowerCase(c_1)",
    "name": "isLowerCase",
    "args": [
      "c_1"
    ],
    "args-type": [
      "char"
    ],
    "scope": "Character",
    "scope-type": "java.lang.Character",
    "documentation": "Determines if the specified character is a lowercase letter.",
    "input-output": [
      {
        "input": {
          "#arg1": "'a'"
        },
        "output": "true"
      },
      {
        "input": {
          "#arg1": "'Z'"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "'m'"
        },
        "output": "true"
      },
      {
        "input": {
          "#arg1": "'1'"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "' '"
        },
        "output": "false"
      }
    ]
  },
  "toUpperCase@java.lang.Character+char": {
    "statement": "Character.toUpperCase(c_1)",
    "name": "toUpperCase",
    "args": [
      "c_1"
    ],
    "args-type": [
      "char"
    ],
    "scope": "Character",
    "scope-type": "java.lang.Character",
    "documentation": "Converts the specified character to its uppercase equivalent using Unicode rules.",
    "input-output": [
      {
        "input": {
          "#arg1": "'a'"
        },
        "output": "'A'"
      },
      {
        "input": {
          "#arg1": "'A'"
        },
        "output": "'A'"
      },
      {
        "input": {
          "#arg1": "'z'"
        },
        "output": "'Z'"
      },
      {
        "input": {
          "#arg1": "'Z'"
        },
        "output": "'Z'"
      },
      {
        "input": {
          "#arg1": "'1'"
        },
        "output": "'1'"
      },
      {
        "input": {
          "#arg1": "'!'"
        },
        "output": "'!'"
      },
      {
        "input": {
          "#arg1": "'\u00e4'"
        },
        "output": "'\u00c4'"
      },
      {
        "input": {
          "#arg1": "'\u00df'"
        },
        "output": "'\u00df'"
      }
    ]
  },
  "indexOf@java.lang.String+int": {
    "statement": "d_1.indexOf((int) c_1)",
    "name": "indexOf",
    "args": [
      "(int) c_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "d_1",
    "scope-type": "java.lang.String",
    "documentation": "Finds the index within this string of the first occurrence of the specified character.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello\"",
          "#arg1": "101"
        },
        "output": "4"
      },
      {
        "input": {
          "#scope": "\"hello\"",
          "#arg1": "108"
        },
        "output": "2"
      },
      {
        "input": {
          "#scope": "\"world\"",
          "#arg1": "111"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "\"world\"",
          "#arg1": "114"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "\"example\"",
          "#arg1": "120"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "\"example\"",
          "#arg1": "122"
        },
        "output": "-1"
      }
    ]
  },
  "asList@java.util.Arrays+int+int": {
    "statement": "Arrays.asList(even_palindrome_count_1, odd_palindrome_count_1)",
    "name": "asList",
    "args": [
      "even_palindrome_count_1",
      "odd_palindrome_count_1"
    ],
    "args-type": [
      "int",
      "int"
    ],
    "scope": "Arrays",
    "scope-type": "java.util.Arrays",
    "documentation": "Converts the specified array of integers into a fixed-size list backed by the array.",
    "input-output": [
      {
        "input": {
          "#arg1": "1",
          "#arg2": "2"
        },
        "output": "java.util.Arrays.asList(1, 2)"
      },
      {
        "input": {
          "#arg1": "10",
          "#arg2": "20"
        },
        "output": "java.util.Arrays.asList(10, 20)"
      },
      {
        "input": {
          "#arg1": "-5",
          "#arg2": "15"
        },
        "output": "java.util.Arrays.asList(-5, 15)"
      },
      {
        "input": {
          "#arg1": "0",
          "#arg2": "100"
        },
        "output": "java.util.Arrays.asList(0, 100)"
      },
      {
        "input": {
          "#arg1": "42",
          "#arg2": "42"
        },
        "output": "java.util.Arrays.asList(42, 42)"
      }
    ]
  },
  "add@java.util.ArrayList<java.lang.Integer>+int": {
    "statement": "ret_1.add(x_1)",
    "name": "add",
    "args": [
      "x_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "ret_1",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Adds the specified integer to the end of the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "5"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg1": "4"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20))",
          "#arg1": "30"
        },
        "output": "true"
      }
    ]
  },
  "sqrt@java.lang.Math+int": {
    "statement": "Math.sqrt(n)",
    "name": "sqrt",
    "args": [
      "n"
    ],
    "args-type": [
      "int"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Computes the square root of a given integer using the Math.sqrt method.",
    "input-output": [
      {
        "input": {
          "#arg1": "4"
        },
        "output": "2.0"
      },
      {
        "input": {
          "#arg1": "9"
        },
        "output": "3.0"
      },
      {
        "input": {
          "#arg1": "16"
        },
        "output": "4.0"
      },
      {
        "input": {
          "#arg1": "0"
        },
        "output": "0.0"
      },
      {
        "input": {
          "#arg1": "1"
        },
        "output": "1.0"
      }
    ]
  },
  "size@java.util.ArrayList<java.lang.Integer>+": {
    "statement": "result_1.size()",
    "name": "size",
    "args": [],
    "args-type": [],
    "scope": "result_1",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Returns the number of elements in the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>()"
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50))"
        },
        "output": "5"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(-1, -2, -3, -4, -5, -6))"
        },
        "output": "6"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())"
        },
        "output": "0"
      }
    ]
  },
  "add@java.util.ArrayList<java.lang.Integer>+java.lang.Integer": {
    "statement": "result_1.add(result_1.get(0) + result_1.get(1) + result_1.get(2) + result_1.get(3))",
    "name": "add",
    "args": [
      "result_1.get(0) + result_1.get(1) + result_1.get(2) + result_1.get(3)"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "result_1",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Adds an integer to the specified ArrayList of integers.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg1": "4"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "10"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 6, 7))",
          "#arg1": "5"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(0))",
          "#arg1": "0"
        },
        "output": "true"
      }
    ]
  },
  "remove@java.util.ArrayList<java.lang.Integer>+int": {
    "statement": "result_1.remove(0)",
    "name": "remove",
    "args": [
      "0"
    ],
    "args-type": [
      "int"
    ],
    "scope": "result_1",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3, 4))",
          "#arg1": "2"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50))",
          "#arg1": "0"
        },
        "output": "10"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9))",
          "#arg1": "4"
        },
        "output": "9"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(100, 200, 300))",
          "#arg1": "1"
        },
        "output": "200"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1))",
          "#arg1": "0"
        },
        "output": "1"
      }
    ]
  },
  "iterator@java.util.List<java.lang.String>+": {
    "statement": "strings.iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "strings",
    "scope-type": "java.util.List<java.lang.String>",
    "documentation": "Returns an iterator over the elements in this list in proper sequence.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))"
        },
        "output": "Arrays.asList(\"apple\", \"banana\", \"cherry\").iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()"
        },
        "output": "Collections.emptyIterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"one\"))"
        },
        "output": "Arrays.asList(\"one\").iterator()"
      }
    ]
  },
  "hasNext@java.util.Iterator<java.lang.String>+": {
    "statement": "string_iter_1.hasNext()",
    "name": "hasNext",
    "args": [],
    "args-type": [],
    "scope": "string_iter_1",
    "scope-type": "java.util.Iterator<java.lang.String>",
    "documentation": "Checks if the iterator has more elements to iterate over.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\")).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList()).iterator()"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"one\")).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"one\", \"two\")).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"one\")).iterator()"
        },
        "output": "false"
      }
    ]
  },
  "next@java.util.Iterator<java.lang.String>+": {
    "statement": "string_iter_1.next()",
    "name": "next",
    "args": [],
    "args-type": [],
    "scope": "string_iter_1",
    "scope-type": "java.util.Iterator<java.lang.String>",
    "documentation": "Returns the next element in the iteration and advances the iterator.",
    "input-output": [
      {
        "input": {
          "#scope": "java.util.Iterator<String> iterator = Arrays.asList(\"apple\", \"banana\", \"cherry\").iterator();"
        },
        "output": "\"apple\""
      },
      {
        "input": {
          "#scope": "java.util.Iterator<String> iterator = Arrays.asList(\"dog\", \"cat\").iterator();"
        },
        "output": "\"dog\""
      },
      {
        "input": {
          "#scope": "java.util.Iterator<String> iterator = Arrays.asList(\"hello\", \"world\", \"!\").iterator();"
        },
        "output": "\"hello\""
      }
    ]
  },
  "startsWith@java.lang.String+java.lang.String": {
    "statement": "string_1.startsWith(prefix)",
    "name": "startsWith",
    "args": [
      "prefix"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "string_1",
    "scope-type": "java.lang.String",
    "documentation": "Determines if the string instance starts with the specified prefix.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "\"hello\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "\"world\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"java programming\"",
          "#arg1": "\"java\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"java programming\"",
          "#arg1": "\"program\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"\"",
          "#arg1": "\"\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"anything\"",
          "#arg1": "\"\""
        },
        "output": "true"
      }
    ]
  },
  "contains@java.lang.String+java.lang.String": {
    "statement": "string_1.contains(substring)",
    "name": "contains",
    "args": [
      "substring"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "string_1",
    "scope-type": "java.lang.String",
    "documentation": "Checks if the specified substring is present within the given string.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "\"world\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "\"hello\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "\"goodbye\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"\"",
          "#arg1": "\"anything\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"hello world\"",
          "#arg1": "\"\""
        },
        "output": "true"
      }
    ]
  },
  "iterator@java.util.List<java.lang.Object>+": {
    "statement": "values.iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "values",
    "scope-type": "java.util.List<java.lang.Object>",
    "documentation": "Returns an iterator over the elements in this list in proper sequence.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))"
        },
        "output": "Arrays.asList(\"apple\", \"banana\", \"cherry\").iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))"
        },
        "output": "Arrays.asList(1, 2, 3).iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())"
        },
        "output": "Arrays.asList().iterator()"
      },
      {
        "input": {
          "#scope": "new LinkedList<>(Arrays.asList(\"x\", \"y\", \"z\"))"
        },
        "output": "Arrays.asList(\"x\", \"y\", \"z\").iterator()"
      },
      {
        "input": {
          "#scope": "new LinkedList<>(Arrays.asList(100, 200, 300))"
        },
        "output": "Arrays.asList(100, 200, 300).iterator()"
      }
    ]
  },
  "abs@java.lang.Math+double": {
    "statement": "Math.abs(numbers[i_1] - numbers[j_1])",
    "name": "abs",
    "args": [
      "numbers[i_1] - numbers[j_1]"
    ],
    "args-type": [
      "double"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the absolute value of a double value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned.",
    "input-output": [
      {
        "input": {
          "#arg1": "3.5"
        },
        "output": "3.5"
      },
      {
        "input": {
          "#arg1": "-7.2"
        },
        "output": "7.2"
      },
      {
        "input": {
          "#arg1": "0.0"
        },
        "output": "0.0"
      },
      {
        "input": {
          "#arg1": "-0.0"
        },
        "output": "0.0"
      },
      {
        "input": {
          "#arg1": "-123456789.0"
        },
        "output": "123456789.0"
      }
    ]
  },
  "min@java.lang.Math+int+int": {
    "statement": "Math.min(a, b)",
    "name": "min",
    "args": [
      "a",
      "b"
    ],
    "args-type": [
      "int",
      "int"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the smaller of two int values.",
    "input-output": [
      {
        "input": {
          "#arg1": "5",
          "#arg2": "10"
        },
        "output": "5"
      },
      {
        "input": {
          "#arg1": "-3",
          "#arg2": "2"
        },
        "output": "-3"
      },
      {
        "input": {
          "#arg1": "0",
          "#arg2": "0"
        },
        "output": "0"
      },
      {
        "input": {
          "#arg1": "100",
          "#arg2": "1000"
        },
        "output": "100"
      },
      {
        "input": {
          "#arg1": "-10",
          "#arg2": "-20"
        },
        "output": "-20"
      }
    ]
  },
  "max@java.lang.Math+int+int": {
    "statement": "Math.max(2, Math.min(a, b))",
    "name": "max",
    "args": [
      "2",
      "Math.min(a, b)"
    ],
    "args-type": [
      "int",
      "int"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the greater of two int values.",
    "input-output": [
      {
        "input": {
          "#arg1": "5",
          "#arg2": "3"
        },
        "output": "5"
      },
      {
        "input": {
          "#arg1": "-10",
          "#arg2": "-20"
        },
        "output": "-10"
      },
      {
        "input": {
          "#arg1": "0",
          "#arg2": "0"
        },
        "output": "0"
      },
      {
        "input": {
          "#arg1": "100",
          "#arg2": "200"
        },
        "output": "200"
      },
      {
        "input": {
          "#arg1": "Integer.MIN_VALUE",
          "#arg2": "Integer.MAX_VALUE"
        },
        "output": "Integer.MAX_VALUE"
      }
    ]
  },
  "asList@java.util.Arrays+char+char+char+char+char+char+char+char+char+char": {
    "statement": "Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')",
    "name": "asList",
    "args": [
      "'a'",
      "'e'",
      "'i'",
      "'o'",
      "'u'",
      "'A'",
      "'E'",
      "'I'",
      "'O'",
      "'U'"
    ],
    "args-type": [
      "char",
      "char",
      "char",
      "char",
      "char",
      "char",
      "char",
      "char",
      "char",
      "char"
    ],
    "scope": "Arrays",
    "scope-type": "java.util.Arrays",
    "documentation": "Converts an array of characters into a fixed-size list backed by the specified array.",
    "input-output": [
      {
        "input": {
          "#arg1": "'a'",
          "#arg2": "'b'",
          "#arg3": "'c'",
          "#arg4": "'d'",
          "#arg5": "'e'",
          "#arg6": "'f'",
          "#arg7": "'g'",
          "#arg8": "'h'",
          "#arg9": "'i'",
          "#arg10": "'j'"
        },
        "output": "Arrays.asList('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')"
      },
      {
        "input": {
          "#arg1": "'x'",
          "#arg2": "'y'",
          "#arg3": "'z'",
          "#arg4": "'x'",
          "#arg5": "'y'",
          "#arg6": "'z'",
          "#arg7": "'x'",
          "#arg8": "'y'",
          "#arg9": "'z'",
          "#arg10": "'x'"
        },
        "output": "Arrays.asList('x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x')"
      },
      {
        "input": {
          "#arg1": "'1'",
          "#arg2": "'2'",
          "#arg3": "'3'",
          "#arg4": "'4'",
          "#arg5": "'5'",
          "#arg6": "'6'",
          "#arg7": "'7'",
          "#arg8": "'8'",
          "#arg9": "'9'",
          "#arg10": "'0'"
        },
        "output": "Arrays.asList('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')"
      },
      {
        "input": {
          "#arg1": "'A'",
          "#arg2": "'B'",
          "#arg3": "'C'",
          "#arg4": "'D'",
          "#arg5": "'E'",
          "#arg6": "'F'",
          "#arg7": "'G'",
          "#arg8": "'H'",
          "#arg9": "'I'",
          "#arg10": "'J'"
        },
        "output": "Arrays.asList('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J')"
      },
      {
        "input": {
          "#arg1": "'!'",
          "#arg2": "'@'",
          "#arg3": "'#'",
          "#arg4": "'$'",
          "#arg5": "'%'",
          "#arg6": "'^'",
          "#arg7": "'&'",
          "#arg8": "'*'",
          "#arg9": "'('",
          "#arg10": "')'"
        },
        "output": "Arrays.asList('!', '@', '#', '$', '%', '^', '&', '*', '(', ')')"
      }
    ]
  },
  "contains@java.util.ArrayList<java.lang.Character>+char": {
    "statement": "vowels_1.contains(word.charAt(i_1))",
    "name": "contains",
    "args": [
      "word.charAt(i_1)"
    ],
    "args-type": [
      "char"
    ],
    "scope": "vowels_1",
    "scope-type": "java.util.ArrayList<java.lang.Character>",
    "documentation": "Checks if the ArrayList contains the specified character.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList('a', 'b', 'c'))",
          "#arg1": "'a'"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList('x', 'y', 'z'))",
          "#arg1": "'a'"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList('1', '2', '3'))",
          "#arg1": "'2'"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())",
          "#arg1": "'a'"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList('a', 'b', 'c', 'd', 'e'))",
          "#arg1": "'e'"
        },
        "output": "true"
      }
    ]
  },
  "sort@java.util.Collections+java.util.ArrayList<java.lang.Integer>": {
    "statement": "Collections.sort(result_1)",
    "name": "sort",
    "args": [
      "result_1"
    ],
    "args-type": [
      "java.util.ArrayList<java.lang.Integer>"
    ],
    "scope": "Collections",
    "scope-type": "java.util.Collections",
    "documentation": "Sorts the specified list into ascending order, according to the natural ordering of its elements.",
    "input-output": [
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(3, 1, 2))"
        },
        "output": "new ArrayList<>(Arrays.asList(1, 2, 3))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(5, 4, 3, 2, 1))"
        },
        "output": "new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(-1, -3, -2))"
        },
        "output": "new ArrayList<>(Arrays.asList(-3, -2, -1))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(10, 20, 10, 20))"
        },
        "output": "new ArrayList<>(Arrays.asList(10, 10, 20, 20))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(42))"
        },
        "output": "new ArrayList<>(Arrays.asList(42))"
      }
    ]
  },
  "size@java.util.List<java.lang.Double>+": {
    "statement": "numbers.size()",
    "name": "size",
    "args": [],
    "args-type": [],
    "scope": "numbers",
    "scope-type": "java.util.List<java.lang.Double>",
    "documentation": "Returns the number of elements in this list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1.0, 2.5, 3.75))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())"
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(4.5))"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1.1, 2.2, 3.3, 4.4, 5.5))"
        },
        "output": "5"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(0.0, -1.0, 1.0))"
        },
        "output": "3"
      }
    ]
  },
  "get@java.util.List<java.lang.Double>+int": {
    "statement": "numbers.get(i_1)",
    "name": "get",
    "args": [
      "i_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "numbers",
    "scope-type": "java.util.List<java.lang.Double>",
    "documentation": "Retrieves the element at the specified position in the list of doubles.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1.1, 2.2, 3.3, 4.4))",
          "#arg1": "2"
        },
        "output": "3.3"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5.5, 6.6, 7.7))",
          "#arg1": "0"
        },
        "output": "5.5"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(8.8, 9.9, 10.10))",
          "#arg1": "1"
        },
        "output": "9.9"
      }
    ]
  },
  "abs@java.lang.Math+java.lang.Double": {
    "statement": "Math.abs(numbers.get(i_1) - numbers.get(j_1))",
    "name": "abs",
    "args": [
      "numbers.get(i_1) - numbers.get(j_1)"
    ],
    "args-type": [
      "java.lang.Double"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the absolute value of a double value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned.",
    "input-output": [
      {
        "input": {
          "#arg1": "new Double(3.5)"
        },
        "output": "3.5"
      },
      {
        "input": {
          "#arg1": "new Double(-3.5)"
        },
        "output": "3.5"
      },
      {
        "input": {
          "#arg1": "new Double(0.0)"
        },
        "output": "0.0"
      },
      {
        "input": {
          "#arg1": "new Double(-0.0)"
        },
        "output": "0.0"
      },
      {
        "input": {
          "#arg1": "new Double(Double.POSITIVE_INFINITY)"
        },
        "output": "Double.POSITIVE_INFINITY"
      },
      {
        "input": {
          "#arg1": "new Double(Double.NEGATIVE_INFINITY)"
        },
        "output": "Double.POSITIVE_INFINITY"
      },
      {
        "input": {
          "#arg1": "new Double(Double.NaN)"
        },
        "output": "Double.NaN"
      }
    ]
  },
  "isEmpty@java.lang.String+": {
    "statement": "s.isEmpty()",
    "name": "isEmpty",
    "args": [],
    "args-type": [],
    "scope": "s",
    "scope-type": "java.lang.String",
    "documentation": "Checks if the specified string is empty, i.e., has a length of 0.",
    "input-output": [
      {
        "input": {
          "#scope": "\"\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"Hello\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\" \""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"\\n\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"abc\""
        },
        "output": "false"
      }
    ]
  },
  "clear@java.util.HashMap<java.lang.Character, java.lang.Integer>+": {
    "statement": "res_1.clear()",
    "name": "clear",
    "args": [],
    "args-type": [],
    "scope": "res_1",
    "scope-type": "java.util.HashMap<java.lang.Character, java.lang.Integer>",
    "documentation": "Removes all of the mappings from this map. The map will be empty after this call returns.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Character, Integer>()"
        },
        "output": "new HashMap<Character, Integer>()"
      },
      {
        "input": {
          "#scope": "new HashMap<Character, Integer>() {{ put('a', 1); put('b', 2); }}"
        },
        "output": "new HashMap<Character, Integer>()"
      },
      {
        "input": {
          "#scope": "new HashMap<Character, Integer>() {{ put('x', 10); }}"
        },
        "output": "new HashMap<Character, Integer>()"
      }
    ]
  },
  "put@java.util.HashMap<java.lang.Character, java.lang.Integer>+char+int": {
    "statement": "res_1.put((char) ('a' + i_2), most_count_1)",
    "name": "put",
    "args": [
      "(char) ('a' + i_2)",
      "most_count_1"
    ],
    "args-type": [
      "char",
      "int"
    ],
    "scope": "res_1",
    "scope-type": "java.util.HashMap<java.lang.Character, java.lang.Integer>",
    "documentation": "Adds a key-value pair to the HashMap, where the key is a character and the value is an integer. If the key already exists, the old value is replaced with the new value.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Character, Integer>()",
          "#arg1": "'a'",
          "#arg2": "1"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Character, Integer>()",
          "#arg1": "'b'",
          "#arg2": "2"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Character, Integer>() {{ put('a', 1); }}",
          "#arg1": "'a'",
          "#arg2": "3"
        },
        "output": "1"
      }
    ]
  },
  "trim@java.lang.String+": {
    "statement": "sentence_1.trim()",
    "name": "trim",
    "args": [],
    "args-type": [],
    "scope": "sentence_1",
    "scope-type": "java.lang.String",
    "documentation": "Removes leading and trailing whitespace from the string.",
    "input-output": [
      {
        "input": {
          "#scope": "\"  hello  \""
        },
        "output": "\"hello\""
      },
      {
        "input": {
          "#scope": "\"noSpaces\""
        },
        "output": "\"noSpaces\""
      },
      {
        "input": {
          "#scope": "\"   surrounded by spaces   \""
        },
        "output": "\"surrounded by spaces\""
      },
      {
        "input": {
          "#scope": "\"\\t\\tTabbed\\t\\t\""
        },
        "output": "\"Tabbed\""
      },
      {
        "input": {
          "#scope": "\"\\nNewline\\n\""
        },
        "output": "\"Newline\""
      }
    ]
  },
  "subSequence@java.lang.String+int+int": {
    "statement": "sentence_1.subSequence(0, 2)",
    "name": "subSequence",
    "args": [
      "0",
      "2"
    ],
    "args-type": [
      "int",
      "int"
    ],
    "scope": "sentence_1",
    "scope-type": "java.lang.String",
    "documentation": "Returns a new character sequence that is a subsequence of this sequence, starting from the specified start index (inclusive) and ending at the specified end index (exclusive).",
    "input-output": [
      {
        "input": {
          "#scope": "\"Hello, World!\"",
          "#arg1": "0",
          "#arg2": "5"
        },
        "output": "\"Hello\""
      },
      {
        "input": {
          "#scope": "\"abcdef\"",
          "#arg1": "2",
          "#arg2": "4"
        },
        "output": "\"cd\""
      },
      {
        "input": {
          "#scope": "\"Java Programming\"",
          "#arg1": "5",
          "#arg2": "16"
        },
        "output": "\"Programming\""
      },
      {
        "input": {
          "#scope": "\"Symbolic Execution\"",
          "#arg1": "0",
          "#arg2": "8"
        },
        "output": "\"Symbolic\""
      },
      {
        "input": {
          "#scope": "\"Test Case\"",
          "#arg1": "5",
          "#arg2": "9"
        },
        "output": "\"Case\""
      }
    ]
  },
  "equals@java.lang.CharSequence+java.lang.String": {
    "statement": "sentence_1.subSequence(0, 2).equals(\"I \")",
    "name": "equals",
    "args": [
      "\"I \""
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "sentence_1.subSequence(0, 2)",
    "scope-type": "java.lang.CharSequence",
    "documentation": "Compares the specified string with the current character sequence to determine if they are equal.",
    "input-output": [
      {
        "input": {
          "#scope": "\"hello\"",
          "#arg1": "\"hello\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"world\"",
          "#arg1": "\"world!\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"test\"",
          "#arg1": "\"TEST\""
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "\"123\"",
          "#arg1": "\"123\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "\"\"",
          "#arg1": "\"\""
        },
        "output": "true"
      }
    ]
  },
  "reverse@java.util.Collections+java.util.ArrayList<java.lang.Integer>": {
    "statement": "Collections.reverse(closing_brackets_1)",
    "name": "reverse",
    "args": [
      "closing_brackets_1"
    ],
    "args-type": [
      "java.util.ArrayList<java.lang.Integer>"
    ],
    "scope": "Collections",
    "scope-type": "java.util.Collections",
    "documentation": "Reverses the order of the elements in the specified list.",
    "input-output": [
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))"
        },
        "output": "new ArrayList<>(Arrays.asList(5, 4, 3, 2, 1))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(10, 20, 30))"
        },
        "output": "new ArrayList<>(Arrays.asList(30, 20, 10))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(7, 8))"
        },
        "output": "new ArrayList<>(Arrays.asList(8, 7))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(42))"
        },
        "output": "new ArrayList<>(Arrays.asList(42))"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList())"
        },
        "output": "new ArrayList<>(Arrays.asList())"
      }
    ]
  },
  "get@java.util.HashMap<java.lang.Integer, java.lang.Integer>+int": {
    "statement": "count_num_1.get(lst[i_2])",
    "name": "get",
    "args": [
      "lst[i_2]"
    ],
    "args-type": [
      "int"
    ],
    "scope": "count_num_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.lang.Integer>",
    "documentation": "Retrieves the value associated with the specified key from the HashMap. If the key is not present, it returns null.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Integer, Integer>()",
          "#arg1": "1"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, Integer>() {{ put(1, 10); }}",
          "#arg1": "1"
        },
        "output": "10"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, Integer>() {{ put(2, 20); }}",
          "#arg1": "1"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, Integer>() {{ put(1, 10); put(2, 20); }}",
          "#arg1": "2"
        },
        "output": "20"
      }
    ]
  },
  "put@java.util.HashMap<java.lang.Integer, java.lang.Integer>+int+int": {
    "statement": "count_num_1.put(lst[i_2], count_num_1.get(lst[i_2]) + 1)",
    "name": "put",
    "args": [
      "lst[i_2]",
      "count_num_1.get(lst[i_2]) + 1"
    ],
    "args-type": [
      "int",
      "int"
    ],
    "scope": "count_num_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.lang.Integer>",
    "documentation": "Inserts a key-value pair into the HashMap. If the key already exists, its value is updated with the new value.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Integer, Integer>()",
          "#arg1": "1",
          "#arg2": "10"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, Integer>() {{ put(2, 20); }}",
          "#arg1": "2",
          "#arg2": "30"
        },
        "output": "20"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, Integer>()",
          "#arg1": "3",
          "#arg2": "30"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, Integer>() {{ put(4, 40); }}",
          "#arg1": "4",
          "#arg2": "50"
        },
        "output": "40"
      }
    ]
  },
  "pow@java.lang.Math+int+double": {
    "statement": "Math.pow(a, 1. / 3)",
    "name": "pow",
    "args": [
      "a",
      "1. / 3"
    ],
    "args-type": [
      "int",
      "double"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Calculates the value of the first argument raised to the power of the second argument.",
    "input-output": [
      {
        "input": {
          "#arg1": "2",
          "#arg2": "3.0"
        },
        "output": "8.0"
      },
      {
        "input": {
          "#arg1": "5",
          "#arg2": "0.5"
        },
        "output": "2.23606797749979"
      },
      {
        "input": {
          "#arg1": "10",
          "#arg2": "2.0"
        },
        "output": "100.0"
      },
      {
        "input": {
          "#arg1": "3",
          "#arg2": "-1.0"
        },
        "output": "0.3333333333333333"
      },
      {
        "input": {
          "#arg1": "0",
          "#arg2": "5.0"
        },
        "output": "0.0"
      }
    ]
  },
  "valueOf@java.math.BigDecimal+double": {
    "statement": "BigDecimal.valueOf(root_1)",
    "name": "valueOf",
    "args": [
      "root_1"
    ],
    "args-type": [
      "double"
    ],
    "scope": "BigDecimal",
    "scope-type": "java.math.BigDecimal",
    "documentation": "Creates a BigDecimal whose value is equal to the specified double.",
    "input-output": [
      {
        "input": {
          "#arg1": "1.23"
        },
        "output": "new BigDecimal(\"1.23\")"
      },
      {
        "input": {
          "#arg1": "0.0"
        },
        "output": "new BigDecimal(\"0.0\")"
      },
      {
        "input": {
          "#arg1": "-456.789"
        },
        "output": "new BigDecimal(\"-456.789\")"
      },
      {
        "input": {
          "#arg1": "3.14159"
        },
        "output": "new BigDecimal(\"3.14159\")"
      },
      {
        "input": {
          "#arg1": "2.71828"
        },
        "output": "new BigDecimal(\"2.71828\")"
      }
    ]
  },
  "setScale@java.math.BigDecimal+int+java.math.RoundingMode": {
    "statement": "bd_1.setScale(0, RoundingMode.HALF_UP)",
    "name": "setScale",
    "args": [
      "0",
      "RoundingMode.HALF_UP"
    ],
    "args-type": [
      "int",
      "java.math.RoundingMode"
    ],
    "scope": "bd_1",
    "scope-type": "java.math.BigDecimal",
    "documentation": "Adjusts the scale of a BigDecimal to the specified value using the given rounding mode.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"123.456\")",
          "#arg1": "2",
          "#arg2": "java.math.RoundingMode.HALF_UP"
        },
        "output": "new java.math.BigDecimal(\"123.46\")"
      },
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"123.451\")",
          "#arg1": "2",
          "#arg2": "java.math.RoundingMode.DOWN"
        },
        "output": "new java.math.BigDecimal(\"123.45\")"
      },
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"123.459\")",
          "#arg1": "1",
          "#arg2": "java.math.RoundingMode.UP"
        },
        "output": "new java.math.BigDecimal(\"123.5\")"
      },
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"123.4\")",
          "#arg1": "3",
          "#arg2": "java.math.RoundingMode.UNNECESSARY"
        },
        "output": "new java.math.BigDecimal(\"123.400\")"
      },
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"-123.456\")",
          "#arg1": "1",
          "#arg2": "java.math.RoundingMode.CEILING"
        },
        "output": "new java.math.BigDecimal(\"-123.4\")"
      }
    ]
  },
  "doubleValue@java.math.BigDecimal+": {
    "statement": "bd_1.setScale(0, RoundingMode.HALF_UP).doubleValue()",
    "name": "doubleValue",
    "args": [],
    "args-type": [],
    "scope": "bd_1.setScale(0, RoundingMode.HALF_UP)",
    "scope-type": "java.math.BigDecimal",
    "documentation": "Returns a BigDecimal whose value is (this * 2), effectively doubling the value of the current BigDecimal instance.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"5\")"
        },
        "output": "new java.math.BigDecimal(\"10\")"
      },
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"-3.5\")"
        },
        "output": "new java.math.BigDecimal(\"-7.0\")"
      },
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"0\")"
        },
        "output": "new java.math.BigDecimal(\"0\")"
      },
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"100.25\")"
        },
        "output": "new java.math.BigDecimal(\"200.50\")"
      },
      {
        "input": {
          "#scope": "new java.math.BigDecimal(\"-0.75\")"
        },
        "output": "new java.math.BigDecimal(\"-1.50\")"
      }
    ]
  },
  "pow@java.lang.Math+int+int": {
    "statement": "Math.pow(round_root_1, 3)",
    "name": "pow",
    "args": [
      "round_root_1",
      "3"
    ],
    "args-type": [
      "int",
      "int"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Calculates the power of a number by raising the first argument to the power of the second argument.",
    "input-output": [
      {
        "input": {
          "#arg1": "2",
          "#arg2": "3"
        },
        "output": "8"
      },
      {
        "input": {
          "#arg1": "5",
          "#arg2": "0"
        },
        "output": "1"
      },
      {
        "input": {
          "#arg1": "10",
          "#arg2": "2"
        },
        "output": "100"
      },
      {
        "input": {
          "#arg1": "3",
          "#arg2": "3"
        },
        "output": "27"
      },
      {
        "input": {
          "#arg1": "2",
          "#arg2": "-2"
        },
        "output": "0.25"
      }
    ]
  },
  "valueOf@java.lang.String+char": {
    "statement": "String.valueOf(str.charAt(i_1))",
    "name": "valueOf",
    "args": [
      "str.charAt(i_1)"
    ],
    "args-type": [
      "char"
    ],
    "scope": "String",
    "scope-type": "java.lang.String",
    "documentation": "Returns the string representation of the specified character.",
    "input-output": [
      {
        "input": {
          "#arg1": "'a'"
        },
        "output": "\"a\""
      },
      {
        "input": {
          "#arg1": "'Z'"
        },
        "output": "\"Z\""
      },
      {
        "input": {
          "#arg1": "'1'"
        },
        "output": "\"1\""
      },
      {
        "input": {
          "#arg1": "'!'"
        },
        "output": "\"!\""
      },
      {
        "input": {
          "#arg1": "' '"
        },
        "output": "\" \""
      }
    ]
  },
  "iterator@java.util.List<java.lang.Double>+": {
    "statement": "numbers.iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "numbers",
    "scope-type": "java.util.List<java.lang.Double>",
    "documentation": "Returns an iterator over the elements in this list in proper sequence.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1.1, 2.2, 3.3))"
        },
        "output": "Arrays.asList(1.1, 2.2, 3.3).iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())"
        },
        "output": "Arrays.asList().iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(4.4, 5.5))"
        },
        "output": "Arrays.asList(4.4, 5.5).iterator()"
      }
    ]
  },
  "hasNext@java.util.Iterator<java.lang.Double>+": {
    "statement": "number_iter_1.hasNext()",
    "name": "hasNext",
    "args": [],
    "args-type": [],
    "scope": "number_iter_1",
    "scope-type": "java.util.Iterator<java.lang.Double>",
    "documentation": "Checks if the iterator has more elements to iterate over.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0)).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<Double>().iterator()"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "Arrays.asList(4.5).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "Arrays.asList(9.9, 8.8).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<Double>(Arrays.asList(7.7)).iterator()"
        },
        "output": "true"
      }
    ]
  },
  "next@java.util.Iterator<java.lang.Double>+": {
    "statement": "number_iter_2.next()",
    "name": "next",
    "args": [],
    "args-type": [],
    "scope": "number_iter_2",
    "scope-type": "java.util.Iterator<java.lang.Double>",
    "documentation": "Returns the next element in the iteration of a collection of Doubles.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1.1, 2.2, 3.3)).iterator()"
        },
        "output": "1.1"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(4.4, 5.5)).iterator()"
        },
        "output": "4.4"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(6.6)).iterator()"
        },
        "output": "6.6"
      }
    ]
  },
  "iterator@java.util.ArrayList<java.lang.Long>+": {
    "statement": "nums.iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "nums",
    "scope-type": "java.util.ArrayList<java.lang.Long>",
    "documentation": "Returns an iterator over the elements in this ArrayList in proper sequence.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.ArrayList<java.lang.Long>(java.util.Arrays.asList(1L, 2L, 3L))"
        },
        "output": "java.util.Iterator<java.lang.Long>"
      },
      {
        "input": {
          "#scope": "new java.util.ArrayList<java.lang.Long>()"
        },
        "output": "java.util.Iterator<java.lang.Long>"
      },
      {
        "input": {
          "#scope": "new java.util.ArrayList<java.lang.Long>(java.util.Arrays.asList(10L, 20L, 30L, 40L))"
        },
        "output": "java.util.Iterator<java.lang.Long>"
      }
    ]
  },
  "hasNext@java.util.Iterator<java.lang.Long>+": {
    "statement": "num_iter_1.hasNext()",
    "name": "hasNext",
    "args": [],
    "args-type": [],
    "scope": "num_iter_1",
    "scope-type": "java.util.Iterator<java.lang.Long>",
    "documentation": "Checks if the iterator has more elements to iterate over.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1L, 2L, 3L)).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList()).iterator()"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10L)).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5L, 15L)).iterator()"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5L)).iterator()"
        },
        "output": "true"
      }
    ]
  },
  "get@java.util.ArrayList<java.lang.Long>+int": {
    "statement": "nums.get(0)",
    "name": "get",
    "args": [
      "0"
    ],
    "args-type": [
      "int"
    ],
    "scope": "nums",
    "scope-type": "java.util.ArrayList<java.lang.Long>",
    "documentation": "Retrieves the element at the specified position in the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10L, 20L, 30L))",
          "#arg1": "0"
        },
        "output": "10L"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(100L, 200L, 300L))",
          "#arg1": "1"
        },
        "output": "200L"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5L, 15L, 25L, 35L))",
          "#arg1": "3"
        },
        "output": "35L"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(42L))",
          "#arg1": "0"
        },
        "output": "42L"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 5L))",
          "#arg1": "2"
        },
        "output": "3L"
      }
    ]
  },
  "size@java.util.ArrayList<java.lang.Long>+": {
    "statement": "nums.size()",
    "name": "size",
    "args": [],
    "args-type": [],
    "scope": "nums",
    "scope-type": "java.util.ArrayList<java.lang.Long>",
    "documentation": "Returns the number of elements in this ArrayList.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>()"
        },
        "output": "0"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1L, 2L, 3L))"
        },
        "output": "3"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(100L, 200L, 300L, 400L, 500L))"
        },
        "output": "5"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(42L))"
        },
        "output": "1"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())"
        },
        "output": "0"
      }
    ]
  },
  "max@java.lang.Math+long+long": {
    "statement": "Math.max(max_sum_1, -nums.get(i_1))",
    "name": "max",
    "args": [
      "max_sum_1",
      "-nums.get(i_1)"
    ],
    "args-type": [
      "long",
      "long"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the greater of two long values.",
    "input-output": [
      {
        "input": {
          "#arg1": "5L",
          "#arg2": "10L"
        },
        "output": "10L"
      },
      {
        "input": {
          "#arg1": "15L",
          "#arg2": "10L"
        },
        "output": "15L"
      },
      {
        "input": {
          "#arg1": "-5L",
          "#arg2": "-10L"
        },
        "output": "-5L"
      },
      {
        "input": {
          "#arg1": "0L",
          "#arg2": "0L"
        },
        "output": "0L"
      },
      {
        "input": {
          "#arg1": "Long.MIN_VALUE",
          "#arg2": "Long.MAX_VALUE"
        },
        "output": "Long.MAX_VALUE"
      }
    ]
  },
  "next@java.util.Iterator<java.lang.Long>+": {
    "statement": "num_iter_1.next()",
    "name": "next",
    "args": [],
    "args-type": [],
    "scope": "num_iter_1",
    "scope-type": "java.util.Iterator<java.lang.Long>",
    "documentation": "Returns the next element in the iteration of a collection of Long values.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1L, 2L, 3L)).iterator()"
        },
        "output": "1L"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10L, 20L, 30L)).iterator()"
        },
        "output": "10L"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(-5L, 0L, 5L)).iterator()"
        },
        "output": "-5L"
      }
    ]
  },
  "arraycopy@java.lang.System+int[]+int+int[]+int+int": {
    "statement": "System.arraycopy(l, 0, sorted_1, 0, l.length)",
    "name": "arraycopy",
    "args": [
      "l",
      "0",
      "sorted_1",
      "0",
      "l.length"
    ],
    "args-type": [
      "int[]",
      "int",
      "int[]",
      "int",
      "int"
    ],
    "scope": "System",
    "scope-type": "java.lang.System",
    "documentation": "Copies a specified range of elements from the source array to the destination array.",
    "input-output": [
      {
        "input": {
          "#arg1": "new int[]{1, 2, 3, 4, 5}",
          "#arg2": "0",
          "#arg3": "new int[]{0, 0, 0, 0, 0}",
          "#arg4": "0",
          "#arg5": "3"
        },
        "output": "new int[]{1, 2, 3, 0, 0}"
      },
      {
        "input": {
          "#arg1": "new int[]{1, 2, 3, 4, 5}",
          "#arg2": "2",
          "#arg3": "new int[]{0, 0, 0, 0, 0}",
          "#arg4": "1",
          "#arg5": "2"
        },
        "output": "new int[]{0, 3, 4, 0, 0}"
      },
      {
        "input": {
          "#arg1": "new int[]{10, 20, 30, 40, 50}",
          "#arg2": "1",
          "#arg3": "new int[]{100, 200, 300, 400, 500}",
          "#arg4": "3",
          "#arg5": "2"
        },
        "output": "new int[]{100, 200, 300, 20, 30}"
      },
      {
        "input": {
          "#arg1": "new int[]{7, 8, 9}",
          "#arg2": "0",
          "#arg3": "new int[]{1, 2, 3, 4, 5}",
          "#arg4": "2",
          "#arg5": "3"
        },
        "output": "new int[]{1, 2, 7, 8, 9}"
      }
    ]
  },
  "equals@java.util.Arrays+int[]+int[]": {
    "statement": "Arrays.equals(l, sorted_1)",
    "name": "equals",
    "args": [
      "l",
      "sorted_1"
    ],
    "args-type": [
      "int[]",
      "int[]"
    ],
    "scope": "Arrays",
    "scope-type": "java.util.Arrays",
    "documentation": "Compares two arrays to determine if they are equal, meaning they contain the same elements in the same order.",
    "input-output": [
      {
        "input": {
          "#arg1": "new int[]{1, 2, 3}",
          "#arg2": "new int[]{1, 2, 3}"
        },
        "output": "true"
      },
      {
        "input": {
          "#arg1": "new int[]{1, 2, 3}",
          "#arg2": "new int[]{3, 2, 1}"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "new int[]{1, 2, 3}",
          "#arg2": "new int[]{1, 2, 3, 4}"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "new int[]{}",
          "#arg2": "new int[]{}"
        },
        "output": "true"
      },
      {
        "input": {
          "#arg1": "new int[]{1, 2, 3}",
          "#arg2": "null"
        },
        "output": "false"
      }
    ]
  },
  "toArray@java.util.HashSet<java.lang.Integer>+java.lang.Integer[]": {
    "statement": "numbers_1.toArray(new Integer[] {})",
    "name": "toArray",
    "args": [
      "new Integer[] {}"
    ],
    "args-type": [
      "java.lang.Integer[]"
    ],
    "scope": "numbers_1",
    "scope-type": "java.util.HashSet<java.lang.Integer>",
    "documentation": "Converts the HashSet of Integer objects to an array of Integer objects.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList(1, 2, 3))",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{1, 2, 3}"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList(5, 10, 15, 20))",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{5, 10, 15, 20}"
      },
      {
        "input": {
          "#scope": "new HashSet<>()",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{}"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList(-1, -2, -3))",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{-1, -2, -3}"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList(100))",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{100}"
      }
    ]
  },
  "sort@java.util.Arrays+java.lang.Integer[]": {
    "statement": "Arrays.sort(no_duplicate_1)",
    "name": "sort",
    "args": [
      "no_duplicate_1"
    ],
    "args-type": [
      "java.lang.Integer[]"
    ],
    "scope": "Arrays",
    "scope-type": "java.util.Arrays",
    "documentation": "Sorts the specified array of integers into ascending numerical order.",
    "input-output": [
      {
        "input": {
          "#arg1": "new Integer[]{3, 1, 2}"
        },
        "output": "new Integer[]{1, 2, 3}"
      },
      {
        "input": {
          "#arg1": "new Integer[]{5, 3, 8, 6}"
        },
        "output": "new Integer[]{3, 5, 6, 8}"
      },
      {
        "input": {
          "#arg1": "new Integer[]{10, 10, 5, 5}"
        },
        "output": "new Integer[]{5, 5, 10, 10}"
      },
      {
        "input": {
          "#arg1": "new Integer[]{1}"
        },
        "output": "new Integer[]{1}"
      },
      {
        "input": {
          "#arg1": "new Integer[]{}"
        },
        "output": "new Integer[]{}"
      }
    ]
  },
  "add@java.util.HashSet<java.lang.Integer>+java.lang.Integer": {
    "statement": "numbers_1.add(n_1)",
    "name": "add",
    "args": [
      "n_1"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "numbers_1",
    "scope-type": "java.util.HashSet<java.lang.Integer>",
    "documentation": "Adds the specified integer to the HashSet if it is not already present.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.HashSet<>()",
          "#arg1": "5"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList(1, 2, 3))",
          "#arg1": "4"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList(1, 2, 3))",
          "#arg1": "2"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>()",
          "#arg1": "10"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new java.util.HashSet<>(java.util.Arrays.asList(5, 6, 7))",
          "#arg1": "5"
        },
        "output": "false"
      }
    ]
  },
  "iterator@java.util.ArrayList<java.lang.String>+": {
    "statement": "lst.iterator()",
    "name": "iterator",
    "args": [],
    "args-type": [],
    "scope": "lst",
    "scope-type": "java.util.ArrayList<java.lang.String>",
    "documentation": "Returns an iterator over the elements in this ArrayList in proper sequence.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\"))"
        },
        "output": "Arrays.asList(\"apple\", \"banana\", \"cherry\").iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"one\", \"two\", \"three\", \"four\"))"
        },
        "output": "Arrays.asList(\"one\", \"two\", \"three\", \"four\").iterator()"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Collections.emptyList())"
        },
        "output": "Collections.emptyList().iterator()"
      }
    ]
  },
  "toArray@java.util.ArrayList<java.lang.Integer>+java.lang.Integer[]": {
    "statement": "result_1.toArray(new Integer[] {})",
    "name": "toArray",
    "args": [
      "new Integer[] {}"
    ],
    "args-type": [
      "java.lang.Integer[]"
    ],
    "scope": "result_1",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Converts the ArrayList of Integers to an array of Integers.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{1, 2, 3}"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{}"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10))",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{10}"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 10, 15, 20))",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{5, 10, 15, 20}"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(-1, 0, 1))",
          "#arg1": "new Integer[0]"
        },
        "output": "new Integer[]{-1, 0, 1}"
      }
    ]
  },
  "get@java.util.HashMap<java.lang.Integer, java.util.ArrayList<java.lang.Integer>>+java.lang.Integer": {
    "statement": "digits_number_1.get(digits_1.get(i_2))",
    "name": "get",
    "args": [
      "digits_1.get(i_2)"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "digits_number_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.util.ArrayList<java.lang.Integer>>",
    "documentation": "Retrieves the value associated with the specified key from the HashMap. The value is an ArrayList of Integers, or null if the key does not exist.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(1, new ArrayList<>(Arrays.asList(10, 20, 30))); put(2, new ArrayList<>(Arrays.asList(40, 50))); }}",
          "#arg1": "1"
        },
        "output": "new ArrayList<>(Arrays.asList(10, 20, 30))"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(1, new ArrayList<>(Arrays.asList(10, 20, 30))); put(2, new ArrayList<>(Arrays.asList(40, 50))); }}",
          "#arg1": "2"
        },
        "output": "new ArrayList<>(Arrays.asList(40, 50))"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(1, new ArrayList<>(Arrays.asList(10, 20, 30))); put(2, new ArrayList<>(Arrays.asList(40, 50))); }}",
          "#arg1": "3"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>()",
          "#arg1": "1"
        },
        "output": "null"
      }
    ]
  },
  "addAll@java.util.ArrayList<java.lang.Integer>+java.util.ArrayList<java.lang.Integer>": {
    "statement": "result_1.addAll(digits_number_1.get(digits_1.get(i_2)))",
    "name": "addAll",
    "args": [
      "digits_number_1.get(digits_1.get(i_2))"
    ],
    "args-type": [
      "java.util.ArrayList<java.lang.Integer>"
    ],
    "scope": "result_1",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Adds all elements from the specified ArrayList to the current ArrayList.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg1": "new ArrayList<>(Arrays.asList(4, 5, 6))"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "new ArrayList<>(Arrays.asList(7, 8, 9))"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 11))",
          "#arg1": "new ArrayList<>()"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg1": "new ArrayList<>(Arrays.asList(3, 2, 1))"
        },
        "output": "true"
      }
    ]
  },
  "contains@java.util.ArrayList<java.lang.Integer>+int": {
    "statement": "digits_1.contains(digit_1)",
    "name": "contains",
    "args": [
      "digit_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "digits_1",
    "scope-type": "java.util.ArrayList<java.lang.Integer>",
    "documentation": "Checks if the ArrayList contains the specified integer.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))",
          "#arg1": "3"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40))",
          "#arg1": "25"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())",
          "#arg1": "1"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(-1, -2, -3, 0))",
          "#arg1": "-2"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(100, 200, 300))",
          "#arg1": "100"
        },
        "output": "true"
      }
    ]
  },
  "containsKey@java.util.HashMap<java.lang.Integer, java.util.ArrayList<java.lang.Integer>>+int": {
    "statement": "digits_number_1.containsKey(digit_1)",
    "name": "containsKey",
    "args": [
      "digit_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "digits_number_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.util.ArrayList<java.lang.Integer>>",
    "documentation": "Checks if the HashMap contains a mapping for the specified key.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>()",
          "#arg1": "1"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(1, new ArrayList<>(Arrays.asList(2, 3, 4))); }}",
          "#arg1": "1"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(2, new ArrayList<>(Arrays.asList(5, 6))); }}",
          "#arg1": "1"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(1, new ArrayList<>(Arrays.asList(7, 8, 9))); put(3, new ArrayList<>(Arrays.asList(10, 11))); }}",
          "#arg1": "3"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>()",
          "#arg1": "42"
        },
        "output": "false"
      }
    ]
  },
  "put@java.util.HashMap<java.lang.Integer, java.util.ArrayList<java.lang.Integer>>+int+java.util.ArrayList<java.lang.Integer>": {
    "statement": "digits_number_1.put(digit_1, new ArrayList<Integer>())",
    "name": "put",
    "args": [
      "digit_1",
      "new ArrayList<Integer>()"
    ],
    "args-type": [
      "int",
      "java.util.ArrayList<java.lang.Integer>"
    ],
    "scope": "digits_number_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.util.ArrayList<java.lang.Integer>>",
    "documentation": "Associates the specified key with the specified value in the map. If the map previously contained a mapping for the key, the old value is replaced.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<>()",
          "#arg1": "5",
          "#arg2": "new ArrayList<>(Arrays.asList(1, 2, 3))"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<>()",
          "#arg1": "10",
          "#arg2": "new ArrayList<>(Arrays.asList(4, 5, 6))"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(1, new ArrayList<>(Arrays.asList(7, 8))); }}",
          "#arg1": "1",
          "#arg2": "new ArrayList<>(Arrays.asList(9, 10))"
        },
        "output": "new ArrayList<>(Arrays.asList(7, 8))"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(2, new ArrayList<>(Arrays.asList(11, 12))); }}",
          "#arg1": "3",
          "#arg2": "new ArrayList<>(Arrays.asList(13, 14))"
        },
        "output": "null"
      }
    ]
  },
  "get@java.util.HashMap<java.lang.Integer, java.util.ArrayList<java.lang.Integer>>+int": {
    "statement": "digits_number_1.get(digit_1)",
    "name": "get",
    "args": [
      "digit_1"
    ],
    "args-type": [
      "int"
    ],
    "scope": "digits_number_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.util.ArrayList<java.lang.Integer>>",
    "documentation": "Retrieves the ArrayList associated with the specified integer key from the HashMap.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(1, new ArrayList<>(Arrays.asList(10, 20, 30))); }}",
          "#arg1": "1"
        },
        "output": "new ArrayList<>(Arrays.asList(10, 20, 30))"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(2, new ArrayList<>(Arrays.asList(5, 15))); }}",
          "#arg1": "2"
        },
        "output": "new ArrayList<>(Arrays.asList(5, 15))"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(3, new ArrayList<>(Arrays.asList(7, 14, 21))); }}",
          "#arg1": "3"
        },
        "output": "new ArrayList<>(Arrays.asList(7, 14, 21))"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>()",
          "#arg1": "4"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<Integer, ArrayList<Integer>>() {{ put(5, new ArrayList<>()); }}",
          "#arg1": "5"
        },
        "output": "new ArrayList<>()"
      }
    ]
  },
  "put@java.util.HashMap<java.lang.String, java.lang.Integer>+java.lang.String+int": {
    "statement": "note_map_1.put(\"o|\", 2)",
    "name": "put",
    "args": [
      "\"o|\"",
      "2"
    ],
    "args-type": [
      "java.lang.String",
      "int"
    ],
    "scope": "note_map_1",
    "scope-type": "java.util.HashMap<java.lang.String, java.lang.Integer>",
    "documentation": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<String, Integer>()",
          "#arg1": "\"apple\"",
          "#arg2": "5"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<String, Integer>() {{ put(\"banana\", 10); }}",
          "#arg1": "\"banana\"",
          "#arg2": "20"
        },
        "output": "10"
      },
      {
        "input": {
          "#scope": "new HashMap<String, Integer>()",
          "#arg1": "\"cherry\"",
          "#arg2": "15"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<String, Integer>() {{ put(\"date\", 30); put(\"elderberry\", 25); }}",
          "#arg1": "\"elderberry\"",
          "#arg2": "35"
        },
        "output": "25"
      },
      {
        "input": {
          "#scope": "new HashMap<String, Integer>() {{ put(\"fig\", 40); }}",
          "#arg1": "\"fig\"",
          "#arg2": "50"
        },
        "output": "40"
      }
    ]
  },
  "get@java.util.HashMap<java.lang.String, java.lang.Integer>+java.lang.String": {
    "statement": "note_map_1.get(note_1)",
    "name": "get",
    "args": [
      "note_1"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "note_map_1",
    "scope-type": "java.util.HashMap<java.lang.String, java.lang.Integer>",
    "documentation": "Retrieves the value associated with the specified key from the HashMap. If the key is not present, it returns null.",
    "input-output": [
      {
        "input": {
          "#scope": "new java.util.HashMap<java.lang.String, java.lang.Integer>() {{ put(\"key1\", 10); put(\"key2\", 20); }}",
          "#arg1": "\"key1\""
        },
        "output": "10"
      },
      {
        "input": {
          "#scope": "new java.util.HashMap<java.lang.String, java.lang.Integer>() {{ put(\"key1\", 10); put(\"key2\", 20); }}",
          "#arg1": "\"key2\""
        },
        "output": "20"
      },
      {
        "input": {
          "#scope": "new java.util.HashMap<java.lang.String, java.lang.Integer>() {{ put(\"key1\", 10); put(\"key2\", 20); }}",
          "#arg1": "\"key3\""
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new java.util.HashMap<java.lang.String, java.lang.Integer>()",
          "#arg1": "\"key1\""
        },
        "output": "null"
      }
    ]
  },
  "get@java.util.HashMap<java.lang.Integer, java.lang.Integer>+java.lang.Integer": {
    "statement": "count_1.get(n_2)",
    "name": "get",
    "args": [
      "n_2"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "count_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.lang.Integer>",
    "documentation": "Retrieves the value associated with the specified key from the HashMap, or returns null if the key is not present.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(1, 10, 2, 20, 3, 30))",
          "#arg1": "1"
        },
        "output": "10"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(1, 10, 2, 20, 3, 30))",
          "#arg1": "2"
        },
        "output": "20"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(1, 10, 2, 20, 3, 30))",
          "#arg1": "4"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<>()",
          "#arg1": "1"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(5, 50))",
          "#arg1": "5"
        },
        "output": "50"
      }
    ]
  },
  "containsKey@java.util.HashMap<java.lang.Integer, java.lang.Integer>+java.lang.Integer": {
    "statement": "count_1.containsKey(n_1)",
    "name": "containsKey",
    "args": [
      "n_1"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "count_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.lang.Integer>",
    "documentation": "Checks if the specified key is present in the HashMap.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(1, 100, 2, 200, 3, 300))",
          "#arg1": "1"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(1, 100, 2, 200, 3, 300))",
          "#arg1": "4"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new HashMap<>()",
          "#arg1": "1"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(0, 0, -1, -100))",
          "#arg1": "0"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new HashMap<>(Map.of(0, 0, -1, -100))",
          "#arg1": "-1"
        },
        "output": "true"
      }
    ]
  },
  "put@java.util.HashMap<java.lang.Integer, java.lang.Integer>+java.lang.Integer+int": {
    "statement": "count_1.put(n_1, 0)",
    "name": "put",
    "args": [
      "n_1",
      "0"
    ],
    "args-type": [
      "java.lang.Integer",
      "int"
    ],
    "scope": "count_1",
    "scope-type": "java.util.HashMap<java.lang.Integer, java.lang.Integer>",
    "documentation": "Associates the specified value with the specified key in the map. If the map previously contained a mapping for the key, the old value is replaced.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashMap<>()",
          "#arg1": "1",
          "#arg2": "100"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<>() {{ put(1, 50); }}",
          "#arg1": "1",
          "#arg2": "200"
        },
        "output": "50"
      },
      {
        "input": {
          "#scope": "new HashMap<>()",
          "#arg1": "2",
          "#arg2": "300"
        },
        "output": "null"
      },
      {
        "input": {
          "#scope": "new HashMap<>() {{ put(3, 75); put(4, 150); }}",
          "#arg1": "3",
          "#arg2": "175"
        },
        "output": "75"
      },
      {
        "input": {
          "#scope": "new HashMap<>() {{ put(5, 500); }}",
          "#arg1": "6",
          "#arg2": "600"
        },
        "output": "null"
      }
    ]
  },
  "add@java.util.ArrayList<java.lang.Object>+java.lang.String": {
    "statement": "res_1.add(new_s_1)",
    "name": "add",
    "args": [
      "new_s_1"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "res_1",
    "scope-type": "java.util.ArrayList<java.lang.Object>",
    "documentation": "Adds the specified string element to the ArrayList.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "\"hello\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"apple\", \"banana\"))",
          "#arg1": "\"cherry\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "\"\""
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(\"one\", \"two\", \"three\"))",
          "#arg1": "\"two\""
        },
        "output": "true"
      }
    ]
  },
  "add@java.util.ArrayList<java.lang.Object>+boolean": {
    "statement": "res_1.add(reverse_s_1.equals(new_s_1))",
    "name": "add",
    "args": [
      "reverse_s_1.equals(new_s_1)"
    ],
    "args-type": [
      "boolean"
    ],
    "scope": "res_1",
    "scope-type": "java.util.ArrayList<java.lang.Object>",
    "documentation": "Appends the specified boolean element to the end of the list, returning true if the list changed as a result of the call.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "true"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "false"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(true, false))",
          "#arg1": "true"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(false, false))",
          "#arg1": "false"
        },
        "output": "true"
      }
    ]
  },
  "max@java.lang.Math+java.lang.Integer+java.lang.Integer": {
    "statement": "Math.max(running_max_1, n_1)",
    "name": "max",
    "args": [
      "running_max_1",
      "n_1"
    ],
    "args-type": [
      "java.lang.Integer",
      "java.lang.Integer"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Returns the greater of two Integer values.",
    "input-output": [
      {
        "input": {
          "#arg1": "new Integer(5)",
          "#arg2": "new Integer(10)"
        },
        "output": "new Integer(10)"
      },
      {
        "input": {
          "#arg1": "new Integer(-3)",
          "#arg2": "new Integer(-7)"
        },
        "output": "new Integer(-3)"
      },
      {
        "input": {
          "#arg1": "new Integer(0)",
          "#arg2": "new Integer(0)"
        },
        "output": "new Integer(0)"
      },
      {
        "input": {
          "#arg1": "new Integer(15)",
          "#arg2": "new Integer(15)"
        },
        "output": "new Integer(15)"
      },
      {
        "input": {
          "#arg1": "new Integer(-10)",
          "#arg2": "new Integer(10)"
        },
        "output": "new Integer(10)"
      }
    ]
  },
  "equals@java.util.HashSet<java.lang.Character>+java.util.HashSet<java.lang.Character>": {
    "statement": "set0_1.equals(set1_1)",
    "name": "equals",
    "args": [
      "set1_1"
    ],
    "args-type": [
      "java.util.HashSet<java.lang.Character>"
    ],
    "scope": "set0_1",
    "scope-type": "java.util.HashSet<java.lang.Character>",
    "documentation": "Checks if the specified HashSet of Characters is equal to the current HashSet, meaning both sets contain the same characters.",
    "input-output": [
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('a', 'b', 'c'))",
          "#arg1": "new HashSet<>(Arrays.asList('a', 'b', 'c'))"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('x', 'y', 'z'))",
          "#arg1": "new HashSet<>(Arrays.asList('z', 'y', 'x'))"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('a', 'b', 'c'))",
          "#arg1": "new HashSet<>(Arrays.asList('a', 'b'))"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('a', 'b', 'c'))",
          "#arg1": "new HashSet<>(Arrays.asList('a', 'b', 'c', 'd'))"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new HashSet<>(Arrays.asList('1', '2', '3'))",
          "#arg1": "new HashSet<>(Arrays.asList('3', '2', '1'))"
        },
        "output": "true"
      }
    ]
  },
  "parseInt@java.lang.Integer+java.lang.String": {
    "statement": "Integer.parseInt(x.split(\"/\")[0])",
    "name": "parseInt",
    "args": [
      "x.split(\"/\")[0]"
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "Integer",
    "scope-type": "java.lang.Integer",
    "documentation": "Parses the specified string as a signed decimal integer.",
    "input-output": [
      {
        "input": {
          "#arg1": "\"123\""
        },
        "output": "123"
      },
      {
        "input": {
          "#arg1": "\"-456\""
        },
        "output": "-456"
      },
      {
        "input": {
          "#arg1": "\"0\""
        },
        "output": "0"
      },
      {
        "input": {
          "#arg1": "\"2147483647\""
        },
        "output": "2147483647"
      },
      {
        "input": {
          "#arg1": "\"-2147483648\""
        },
        "output": "-2147483648"
      }
    ]
  },
  "isAlphabetic@java.lang.Character+char": {
    "statement": "Character.isAlphabetic(c_1)",
    "name": "isAlphabetic",
    "args": [
      "c_1"
    ],
    "args-type": [
      "char"
    ],
    "scope": "Character",
    "scope-type": "java.lang.Character",
    "documentation": "Determines if the specified character is alphabetic.",
    "input-output": [
      {
        "input": {
          "#arg1": "'A'"
        },
        "output": "true"
      },
      {
        "input": {
          "#arg1": "'z'"
        },
        "output": "true"
      },
      {
        "input": {
          "#arg1": "'1'"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "'$'"
        },
        "output": "false"
      },
      {
        "input": {
          "#arg1": "'\u03a9'"
        },
        "output": "true"
      }
    ]
  },
  "sort@java.util.Collections+java.util.List<java.lang.Integer>": {
    "statement": "Collections.sort(thirds_1)",
    "name": "sort",
    "args": [
      "thirds_1"
    ],
    "args-type": [
      "java.util.List<java.lang.Integer>"
    ],
    "scope": "Collections",
    "scope-type": "java.util.Collections",
    "documentation": "Sorts the specified list into ascending order, according to the natural ordering of its elements.",
    "input-output": [
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(3, 1, 2))"
        },
        "output": "Arrays.asList(1, 2, 3)"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(-1, 0, 1))"
        },
        "output": "Arrays.asList(-1, 0, 1)"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(5, 3, 4, 2, 1))"
        },
        "output": "Arrays.asList(1, 2, 3, 4, 5)"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(10, 10, 10))"
        },
        "output": "Arrays.asList(10, 10, 10)"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList())"
        },
        "output": "Arrays.asList()"
      }
    ]
  },
  "asList@java.util.Arrays+int+int+int+int+int": {
    "statement": "Arrays.asList(1, 3, 5, 7, 9)",
    "name": "asList",
    "args": [
      "1",
      "3",
      "5",
      "7",
      "9"
    ],
    "args-type": [
      "int",
      "int",
      "int",
      "int",
      "int"
    ],
    "scope": "Arrays",
    "scope-type": "java.util.Arrays",
    "documentation": "Converts a sequence of five integers into a fixed-size list backed by the specified array.",
    "input-output": [
      {
        "input": {
          "#arg1": "1",
          "#arg2": "2",
          "#arg3": "3",
          "#arg4": "4",
          "#arg5": "5"
        },
        "output": "Arrays.asList(1, 2, 3, 4, 5)"
      },
      {
        "input": {
          "#arg1": "10",
          "#arg2": "20",
          "#arg3": "30",
          "#arg4": "40",
          "#arg5": "50"
        },
        "output": "Arrays.asList(10, 20, 30, 40, 50)"
      },
      {
        "input": {
          "#arg1": "-1",
          "#arg2": "0",
          "#arg3": "1",
          "#arg4": "2",
          "#arg5": "3"
        },
        "output": "Arrays.asList(-1, 0, 1, 2, 3)"
      },
      {
        "input": {
          "#arg1": "100",
          "#arg2": "200",
          "#arg3": "300",
          "#arg4": "400",
          "#arg5": "500"
        },
        "output": "Arrays.asList(100, 200, 300, 400, 500)"
      },
      {
        "input": {
          "#arg1": "0",
          "#arg2": "0",
          "#arg3": "0",
          "#arg4": "0",
          "#arg5": "0"
        },
        "output": "Arrays.asList(0, 0, 0, 0, 0)"
      }
    ]
  },
  "min@java.util.Collections+java.util.List<java.lang.Integer>": {
    "statement": "Collections.min(lst)",
    "name": "min",
    "args": [
      "lst"
    ],
    "args-type": [
      "java.util.List<java.lang.Integer>"
    ],
    "scope": "Collections",
    "scope-type": "java.util.Collections",
    "documentation": "Returns the minimum element of the given list according to the natural ordering of its elements.",
    "input-output": [
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(3, 1, 4, 1, 5, 9))"
        },
        "output": "1"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(-10, -20, 0, 5, 15))"
        },
        "output": "-20"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(100))"
        },
        "output": "100"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(7, 7, 7, 7))"
        },
        "output": "7"
      },
      {
        "input": {
          "#arg1": "new ArrayList<>(Arrays.asList(2, 3, 1, 2, 3))"
        },
        "output": "1"
      }
    ]
  },
  "add@java.util.List<java.lang.Integer>+T": {
    "statement": "result_1.add(Collections.min(lst))",
    "name": "add",
    "args": [
      "Collections.min(lst)"
    ],
    "args-type": [
      "T"
    ],
    "scope": "result_1",
    "scope-type": "java.util.List<java.lang.Integer>",
    "documentation": "Adds the specified element to the end of the list.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3))",
          "#arg1": "4"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>()",
          "#arg1": "10"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(5, 6, 7, 8))",
          "#arg1": "9"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(-1, -2, -3))",
          "#arg1": "0"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(100, 200, 300))",
          "#arg1": "400"
        },
        "output": "true"
      }
    ]
  },
  "remove@java.util.List<java.lang.Integer>+java.lang.Integer": {
    "statement": "lst.remove(result_1.get(result_1.size() - 1))",
    "name": "remove",
    "args": [
      "result_1.get(result_1.size() - 1)"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "lst",
    "scope-type": "java.util.List<java.lang.Integer>",
    "documentation": "Removes the first occurrence of the specified integer from the list, if it is present.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))",
          "#arg1": "3"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))",
          "#arg1": "6"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 2, 3))",
          "#arg1": "2"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())",
          "#arg1": "1"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40))",
          "#arg1": "30"
        },
        "output": "true"
      }
    ]
  },
  "max@java.util.Collections+java.util.List<java.lang.Integer>": {
    "statement": "Collections.max(lst)",
    "name": "max",
    "args": [
      "lst"
    ],
    "args-type": [
      "java.util.List<java.lang.Integer>"
    ],
    "scope": "Collections",
    "scope-type": "java.util.Collections",
    "documentation": "Returns the maximum element of the given list, according to the natural ordering of its elements.",
    "input-output": [
      {
        "input": {
          "#arg1": "java.util.Arrays.asList(1, 2, 3, 4, 5)"
        },
        "output": "5"
      },
      {
        "input": {
          "#arg1": "java.util.Arrays.asList(-10, 0, 10, 20)"
        },
        "output": "20"
      },
      {
        "input": {
          "#arg1": "java.util.Arrays.asList(100)"
        },
        "output": "100"
      },
      {
        "input": {
          "#arg1": "java.util.Arrays.asList(-5, -1, -3)"
        },
        "output": "-1"
      },
      {
        "input": {
          "#arg1": "java.util.Arrays.asList(3, 3, 3)"
        },
        "output": "3"
      }
    ]
  },
  "getInstance@java.security.MessageDigest+java.lang.String": {
    "statement": "MessageDigest.getInstance(\"MD5\")",
    "name": "getInstance",
    "args": [
      "\"MD5\""
    ],
    "args-type": [
      "java.lang.String"
    ],
    "scope": "MessageDigest",
    "scope-type": "java.security.MessageDigest",
    "documentation": "Returns a MessageDigest object that implements the specified digest algorithm.",
    "input-output": [
      {
        "input": {
          "#arg1": "\"MD5\""
        },
        "output": "MessageDigest.getInstance(\"MD5\")"
      },
      {
        "input": {
          "#arg1": "\"SHA-1\""
        },
        "output": "MessageDigest.getInstance(\"SHA-1\")"
      },
      {
        "input": {
          "#arg1": "\"SHA-256\""
        },
        "output": "MessageDigest.getInstance(\"SHA-256\")"
      }
    ]
  },
  "getBytes@java.lang.String+": {
    "statement": "text.getBytes()",
    "name": "getBytes",
    "args": [],
    "args-type": [],
    "scope": "text",
    "scope-type": "java.lang.String",
    "documentation": "Converts the string to a byte array using the platform's default charset.",
    "input-output": [
      {
        "input": {
          "#scope": "\"Hello\""
        },
        "output": "new byte[]{72, 101, 108, 108, 111}"
      },
      {
        "input": {
          "#scope": "\"\""
        },
        "output": "new byte[]{}"
      },
      {
        "input": {
          "#scope": "\"A\""
        },
        "output": "new byte[]{65}"
      },
      {
        "input": {
          "#scope": "\"123\""
        },
        "output": "new byte[]{49, 50, 51}"
      },
      {
        "input": {
          "#scope": "\"\\u00E9\""
        },
        "output": "new byte[]{-23}"
      }
    ]
  },
  "update@java.security.MessageDigest+byte[]": {
    "statement": "md_1.update(text.getBytes())",
    "name": "update",
    "args": [
      "text.getBytes()"
    ],
    "args-type": [
      "byte[]"
    ],
    "scope": "md_1",
    "scope-type": "java.security.MessageDigest",
    "documentation": "Updates the digest using the specified array of bytes, processing the input data and updating the internal state of the MessageDigest object.",
    "input-output": [
      {
        "input": {
          "#scope": "MessageDigest.getInstance(\"SHA-256\")",
          "#arg1": "new byte[]{0x01, 0x02, 0x03}"
        },
        "output": "void"
      },
      {
        "input": {
          "#scope": "MessageDigest.getInstance(\"MD5\")",
          "#arg1": "new byte[]{(byte)0xFF, (byte)0xAB}"
        },
        "output": "void"
      },
      {
        "input": {
          "#scope": "MessageDigest.getInstance(\"SHA-1\")",
          "#arg1": "new byte[]{}"
        },
        "output": "void"
      }
    ]
  },
  "printHexBinary@javax.xml.bind.DatatypeConverter+byte[]": {
    "statement": "DatatypeConverter.printHexBinary(digest_1)",
    "name": "printHexBinary",
    "args": [
      "digest_1"
    ],
    "args-type": [
      "byte[]"
    ],
    "scope": "DatatypeConverter",
    "scope-type": "javax.xml.bind.DatatypeConverter",
    "documentation": "Converts an array of bytes into a string representation of hexadecimal characters.",
    "input-output": [
      {
        "input": {
          "#arg1": "new byte[]{0x01, 0x02, 0x03}"
        },
        "output": "\"010203\""
      },
      {
        "input": {
          "#arg1": "new byte[]{(byte) 0xFF, (byte) 0xAB, (byte) 0xCD}"
        },
        "output": "\"FFABCD\""
      },
      {
        "input": {
          "#arg1": "new byte[]{0x00, 0x10, 0x20, 0x30}"
        },
        "output": "\"00102030\""
      },
      {
        "input": {
          "#arg1": "new byte[]{}"
        },
        "output": "\"\""
      },
      {
        "input": {
          "#arg1": "new byte[]{(byte) 0xDE, (byte) 0xAD, (byte) 0xBE, (byte) 0xEF}"
        },
        "output": "\"DEADBEEF\""
      }
    ]
  },
  "pow@java.lang.Math+double+double": {
    "statement": "Math.pow(s_1 * (s_1 - a) * (s_1 - b) * (s_1 - c), 0.5)",
    "name": "pow",
    "args": [
      "s_1 * (s_1 - a) * (s_1 - b) * (s_1 - c)",
      "0.5"
    ],
    "args-type": [
      "double",
      "double"
    ],
    "scope": "Math",
    "scope-type": "java.lang.Math",
    "documentation": "Calculates the value of the first argument raised to the power of the second argument.",
    "input-output": [
      {
        "input": {
          "#arg1": "2.0",
          "#arg2": "3.0"
        },
        "output": "8.0"
      },
      {
        "input": {
          "#arg1": "5.0",
          "#arg2": "0.0"
        },
        "output": "1.0"
      },
      {
        "input": {
          "#arg1": "2.0",
          "#arg2": "-2.0"
        },
        "output": "0.25"
      },
      {
        "input": {
          "#arg1": "10.0",
          "#arg2": "1.0"
        },
        "output": "10.0"
      },
      {
        "input": {
          "#arg1": "0.0",
          "#arg2": "5.0"
        },
        "output": "0.0"
      }
    ]
  },
  "contains@java.util.List<java.lang.Integer>+java.lang.Integer": {
    "statement": "result_1.contains(n_1)",
    "name": "contains",
    "args": [
      "n_1"
    ],
    "args-type": [
      "java.lang.Integer"
    ],
    "scope": "result_1",
    "scope-type": "java.util.List<java.lang.Integer>",
    "documentation": "Checks if the list contains the specified integer.",
    "input-output": [
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))",
          "#arg1": "3"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50))",
          "#arg1": "25"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList())",
          "#arg1": "1"
        },
        "output": "false"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(1, 1, 1, 1, 1))",
          "#arg1": "1"
        },
        "output": "true"
      },
      {
        "input": {
          "#scope": "new ArrayList<>(Arrays.asList(-1, -2, -3, -4, -5))",
          "#arg1": "-3"
        },
        "output": "true"
      }
    ]
  },
  "digest@java.security.MessageDigest+": {
    "statement": "md_1.digest()",
    "name": "digest",
    "args": [],
    "args-type": [],
    "scope": "md_1",
    "scope-type": "java.security.MessageDigest",
    "documentation": "Computes the hash value (digest) of the data that has been updated in the MessageDigest instance.",
    "input-output": [
      {
        "input": {
          "scope": "MessageDigest.getInstance(\"SHA-256\")"
        },
        "output": "byte[] representing the SHA-256 hash of the data"
      },
      {
        "input": {
          "scope": "MessageDigest.getInstance(\"MD5\")"
        },
        "output": "byte[] representing the MD5 hash of the data"
      }
    ]
  }
}