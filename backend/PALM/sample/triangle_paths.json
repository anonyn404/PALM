{
  "triangle.3": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b, \"Path condition is violated: assertTrue(a <= b) //[1]\");\n    assertFalse(b <= c, \"Path condition is violated: assertFalse(b <= c) //[2]\");\n    assertTrue(c < a, \"Path condition is violated: assertTrue(c < a) //[3]\");\n    x_1 = c;\n    y_1 = a;\n    z_1 = b;\n    assertFalse(x_1 + y_1 <= z_1, \"Path condition is violated: assertFalse(x_1 + y_1 <= z_1) //[4]\");\n    System.out.println(\"A valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b); //[1]\n    assertFalse(b <= c); //[2]\n    assertTrue(c < a); //[3]\n    x_1 = c;\n    y_1 = a;\n    z_1 = b;\n    assertFalse(x_1 + y_1 <= z_1); //[4]\n    System.out.println(\"A valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertTrue(a <= b)\n2#assertFalse(b <= c)\n3#assertTrue(c < a)\n4#assertFalse(c + a <= b)\n\n*/\n",
  "triangle.1": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b, \"Path condition is violated: assertTrue(a <= b) //[1]\");\n    assertTrue(b <= c, \"Path condition is violated: assertTrue(b <= c) //[2]\");\n    x_1 = a;\n    y_1 = b;\n    z_1 = c;\n    assertFalse(x_1 + y_1 <= z_1, \"Path condition is violated: assertFalse(x_1 + y_1 <= z_1) //[3]\");\n    System.out.println(\"A valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b); //[1]\n    assertTrue(b <= c); //[2]\n    x_1 = a;\n    y_1 = b;\n    z_1 = c;\n    assertFalse(x_1 + y_1 <= z_1); //[3]\n    System.out.println(\"A valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertTrue(a <= b)\n2#assertTrue(b <= c)\n3#assertFalse(a + b <= c)\n\n*/\n",
  "triangle.7": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b, \"Path condition is violated: assertFalse(a <= b) //[1]\");\n    assertTrue(c > a, \"Path condition is violated: assertTrue(c > a) //[2]\");\n    x_1 = b;\n    y_1 = a;\n    z_1 = c;\n    assertFalse(x_1 + y_1 <= z_1, \"Path condition is violated: assertFalse(x_1 + y_1 <= z_1) //[3]\");\n    System.out.println(\"A valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b); //[1]\n    assertTrue(c > a); //[2]\n    x_1 = b;\n    y_1 = a;\n    z_1 = c;\n    assertFalse(x_1 + y_1 <= z_1); //[3]\n    System.out.println(\"A valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertFalse(a <= b)\n2#assertTrue(c > a)\n3#assertFalse(b + a <= c)\n\n*/\n",
  "triangle.8": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b, \"Path condition is violated: assertFalse(a <= b) //[1]\");\n    assertFalse(c > a, \"Path condition is violated: assertFalse(c > a) //[2]\");\n    assertTrue(c < b, \"Path condition is violated: assertTrue(c < b) //[3]\");\n    x_1 = c;\n    y_1 = b;\n    z_1 = a;\n    assertTrue(x_1 + y_1 <= z_1, \"Path condition is violated: assertTrue(x_1 + y_1 <= z_1) //[4]\");\n    System.out.println(\"Not a valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b); //[1]\n    assertFalse(c > a); //[2]\n    assertTrue(c < b); //[3]\n    x_1 = c;\n    y_1 = b;\n    z_1 = a;\n    assertTrue(x_1 + y_1 <= z_1); //[4]\n    System.out.println(\"Not a valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertFalse(a <= b)\n2#assertFalse(c > a)\n3#assertTrue(c < b)\n4#assertTrue(c + b <= a)\n\n*/\n",
  "triangle.6": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b, \"Path condition is violated: assertFalse(a <= b) //[1]\");\n    assertTrue(c > a, \"Path condition is violated: assertTrue(c > a) //[2]\");\n    x_1 = b;\n    y_1 = a;\n    z_1 = c;\n    assertTrue(x_1 + y_1 <= z_1, \"Path condition is violated: assertTrue(x_1 + y_1 <= z_1) //[3]\");\n    System.out.println(\"Not a valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b); //[1]\n    assertTrue(c > a); //[2]\n    x_1 = b;\n    y_1 = a;\n    z_1 = c;\n    assertTrue(x_1 + y_1 <= z_1); //[3]\n    System.out.println(\"Not a valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertFalse(a <= b)\n2#assertTrue(c > a)\n3#assertTrue(b + a <= c)\n\n*/\n",
  "triangle.2": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b, \"Path condition is violated: assertTrue(a <= b) //[1]\");\n    assertFalse(b <= c, \"Path condition is violated: assertFalse(b <= c) //[2]\");\n    assertTrue(c < a, \"Path condition is violated: assertTrue(c < a) //[3]\");\n    x_1 = c;\n    y_1 = a;\n    z_1 = b;\n    assertTrue(x_1 + y_1 <= z_1, \"Path condition is violated: assertTrue(x_1 + y_1 <= z_1) //[4]\");\n    System.out.println(\"Not a valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b); //[1]\n    assertFalse(b <= c); //[2]\n    assertTrue(c < a); //[3]\n    x_1 = c;\n    y_1 = a;\n    z_1 = b;\n    assertTrue(x_1 + y_1 <= z_1); //[4]\n    System.out.println(\"Not a valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertTrue(a <= b)\n2#assertFalse(b <= c)\n3#assertTrue(c < a)\n4#assertTrue(c + a <= b)\n\n*/\n",
  "triangle.4": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b, \"Path condition is violated: assertTrue(a <= b) //[1]\");\n    assertFalse(b <= c, \"Path condition is violated: assertFalse(b <= c) //[2]\");\n    assertFalse(c < a, \"Path condition is violated: assertFalse(c < a) //[3]\");\n    x_1 = a;\n    y_1 = c;\n    z_1 = b;\n    assertTrue(x_1 + y_1 <= z_1, \"Path condition is violated: assertTrue(x_1 + y_1 <= z_1) //[4]\");\n    System.out.println(\"Not a valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b); //[1]\n    assertFalse(b <= c); //[2]\n    assertFalse(c < a); //[3]\n    x_1 = a;\n    y_1 = c;\n    z_1 = b;\n    assertTrue(x_1 + y_1 <= z_1); //[4]\n    System.out.println(\"Not a valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertTrue(a <= b)\n2#assertFalse(b <= c)\n3#assertFalse(c < a)\n4#assertTrue(a + c <= b)\n\n*/\n",
  "triangle.0": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b, \"Path condition is violated: assertTrue(a <= b) //[1]\");\n    assertTrue(b <= c, \"Path condition is violated: assertTrue(b <= c) //[2]\");\n    x_1 = a;\n    y_1 = b;\n    z_1 = c;\n    assertTrue(x_1 + y_1 <= z_1, \"Path condition is violated: assertTrue(x_1 + y_1 <= z_1) //[3]\");\n    System.out.println(\"Not a valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b); //[1]\n    assertTrue(b <= c); //[2]\n    x_1 = a;\n    y_1 = b;\n    z_1 = c;\n    assertTrue(x_1 + y_1 <= z_1); //[3]\n    System.out.println(\"Not a valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertTrue(a <= b)\n2#assertTrue(b <= c)\n3#assertTrue(a + b <= c)\n\n*/\n",
  "triangle.11": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b, \"Path condition is violated: assertFalse(a <= b) //[1]\");\n    assertFalse(c > a, \"Path condition is violated: assertFalse(c > a) //[2]\");\n    assertFalse(c < b, \"Path condition is violated: assertFalse(c < b) //[3]\");\n    x_1 = b;\n    y_1 = c;\n    z_1 = a;\n    assertFalse(x_1 + y_1 <= z_1, \"Path condition is violated: assertFalse(x_1 + y_1 <= z_1) //[4]\");\n    System.out.println(\"A valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b); //[1]\n    assertFalse(c > a); //[2]\n    assertFalse(c < b); //[3]\n    x_1 = b;\n    y_1 = c;\n    z_1 = a;\n    assertFalse(x_1 + y_1 <= z_1); //[4]\n    System.out.println(\"A valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertFalse(a <= b)\n2#assertFalse(c > a)\n3#assertFalse(c < b)\n4#assertFalse(b + c <= a)\n\n*/\n",
  "triangle.9": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b, \"Path condition is violated: assertFalse(a <= b) //[1]\");\n    assertFalse(c > a, \"Path condition is violated: assertFalse(c > a) //[2]\");\n    assertTrue(c < b, \"Path condition is violated: assertTrue(c < b) //[3]\");\n    x_1 = c;\n    y_1 = b;\n    z_1 = a;\n    assertFalse(x_1 + y_1 <= z_1, \"Path condition is violated: assertFalse(x_1 + y_1 <= z_1) //[4]\");\n    System.out.println(\"A valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b); //[1]\n    assertFalse(c > a); //[2]\n    assertTrue(c < b); //[3]\n    x_1 = c;\n    y_1 = b;\n    z_1 = a;\n    assertFalse(x_1 + y_1 <= z_1); //[4]\n    System.out.println(\"A valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertFalse(a <= b)\n2#assertFalse(c > a)\n3#assertTrue(c < b)\n4#assertFalse(c + b <= a)\n\n*/\n",
  "triangle.10": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b, \"Path condition is violated: assertFalse(a <= b) //[1]\");\n    assertFalse(c > a, \"Path condition is violated: assertFalse(c > a) //[2]\");\n    assertFalse(c < b, \"Path condition is violated: assertFalse(c < b) //[3]\");\n    x_1 = b;\n    y_1 = c;\n    z_1 = a;\n    assertTrue(x_1 + y_1 <= z_1, \"Path condition is violated: assertTrue(x_1 + y_1 <= z_1) //[4]\");\n    System.out.println(\"Not a valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertFalse(a <= b); //[1]\n    assertFalse(c > a); //[2]\n    assertFalse(c < b); //[3]\n    x_1 = b;\n    y_1 = c;\n    z_1 = a;\n    assertTrue(x_1 + y_1 <= z_1); //[4]\n    System.out.println(\"Not a valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertFalse(a <= b)\n2#assertFalse(c > a)\n3#assertFalse(c < b)\n4#assertTrue(b + c <= a)\n\n*/\n",
  "triangle.5": "import java.util.*;\n\nclass TRIANGLE {\n    static void assertFalse(boolean v, String errmsg) {assert (v == false): errmsg;}\n    static void assertTrue(boolean v, String errmsg) {assert (v == true): errmsg;}\n    public static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b, \"Path condition is violated: assertTrue(a <= b) //[1]\");\n    assertFalse(b <= c, \"Path condition is violated: assertFalse(b <= c) //[2]\");\n    assertFalse(c < a, \"Path condition is violated: assertFalse(c < a) //[3]\");\n    x_1 = a;\n    y_1 = c;\n    z_1 = b;\n    assertFalse(x_1 + y_1 <= z_1, \"Path condition is violated: assertFalse(x_1 + y_1 <= z_1) //[4]\");\n    System.out.println(\"A valid triangle\");\n}\n\n\npublic static void main(String args[]) { ; }\n}\n/* SEPARATOR */\n/*\npublic static void triangle(int a, int b, int c){\n    int x_1, y_1, z_1;\n    assertTrue(a <= b); //[1]\n    assertFalse(b <= c); //[2]\n    assertFalse(c < a); //[3]\n    x_1 = a;\n    y_1 = c;\n    z_1 = b;\n    assertFalse(x_1 + y_1 <= z_1); //[4]\n    System.out.println(\"A valid triangle\");\n}\n*/\n/* SEPARATOR */\n/*\n[]\n*/\n/* SEPARATOR */\n/*\n1#assertTrue(a <= b)\n2#assertFalse(b <= c)\n3#assertFalse(c < a)\n4#assertFalse(a + c <= b)\n\n*/\n"
}